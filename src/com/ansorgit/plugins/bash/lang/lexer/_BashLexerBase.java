// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: bash.flex

/*** JFlex specification for Bash ****
 The Bash language is a beast. It contains many strange or unusual constructs
 and has a great flexibility in what is possible.
 The lexer tries to do as much as possible in the lexing phase to help the parser
 later on.

 A major problem is that tokens have to interpreted according to their context.
 e.g. a=b echo a=b
 has an assignment in front and a string as parameter to the echo command. So the EQ
 token (for the = character) has to be remapped to a WORD later on (see BashTokenTypeRemapper).

 Another problem is that string can contain unescaped substrings, e.g.
 "$(echo hello "$(echo "world")")" is just one stringParsingState(). But this string contains
 two levels of embedded strings in the embedded subshell command.
 The lexer parses a string as STRING_BEGIN, STRING_DATA and STRING_END. These
 tokens are mapped to a STRING later on by the lexer.MergingLexer class.

 Lexing all as a STRING token was the way to go. This worked, but for some strange
 reason the lexer got wrong offsets for this complex setup (returning the string only at the
 last occurence of "). That's why the token merging strategy was established.

 If you really want to hack on this lexer: Be careful :)
 There are unit tests for the lexer but there's no 100% coverage for all cases.

 @author Joachim Ansorg, mail@ansorg-it.com
 **/

/** Based on the arc lexer (http://code.google.com/p/intelli-arc/) **/

package com.ansorgit.plugins.bash.lang.lexer;

import com.intellij.psi.tree.IElementType;


public abstract class _BashLexerBase implements BashLexerDef {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int S_TEST = 2;
  public static final int S_TEST_COMMAND = 4;
  public static final int S_ARITH = 6;
  public static final int S_ARITH_SQUARE_MODE = 8;
  public static final int S_ARITH_ARRAY_MODE = 10;
  public static final int S_CASE = 12;
  public static final int S_CASE_PATTERN = 14;
  public static final int S_SUBSHELL = 16;
  public static final int S_DOLLAR_PREFIXED = 18;
  public static final int S_ARRAY = 20;
  public static final int S_ASSIGNMENT_LIST = 22;
  public static final int X_STRINGMODE = 24;
  public static final int S_PARAM_EXPANSION = 26;
  public static final int S_PARAM_EXPANSION_PATTERN = 28;
  public static final int S_PARAM_EXPANSION_DELIMITER = 30;
  public static final int S_PARAM_EXPANSION_REPLACEMENT = 32;
  public static final int S_BACKQUOTE = 34;
  public static final int X_HEREDOC_MARKER = 36;
  public static final int X_HEREDOC_MARKER_IGNORE_TABS = 38;
  public static final int X_HEREDOC = 40;
  public static final int S_HEREDOC_EXPECTED = 42;
  public static final int X_HERE_STRING = 44;
  public static final int S_SINGLE_QUOTE_IN_BACKTICK = 46;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
          8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
          16, 16, 17, 17, 18, 18, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
          "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
                  "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
                  "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
                  "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
                  "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
                  "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
                  "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
                  "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
                  "\1\u3300\1\u3400\1\u3500\1\u1f00\1\u3600\1\u3700\1\u3800\1\u3900"+
                  "\1\u0100\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
                  "\1\u1f00\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
                  "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00"+
                  "\1\u4f00\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100"+
                  "\1\u5300\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600"+
                  "\2\u1f00\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00"+
                  "\1\u0100\1\u5b00\1\u5c00\11\u1f00\1\u5d00\27\u1f00\1\u5e00\1\u5f00"+
                  "\1\u6000\1\u6100\11\u1f00\1\u6200\1\u6300\5\u1f00\1\u6400\1\u6500"+
                  "\4\u1f00\1\u6600\21\u1f00\246\u0100\1\u6700\20\u0100\1\u6800\1\u6900"+
                  "\25\u0100\1\u6a00\34\u0100\1\u6b00\14\u1f00\2\u0100\1\u6c00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
          "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
                  "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
                  "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
                  "\7\25\2\26\1\27\1\30\1\31\1\32\1\33\1\34"+
                  "\1\35\6\36\1\37\4\40\1\37\1\40\2\37\3\40"+
                  "\1\37\7\40\1\41\1\42\1\43\1\44\1\40\1\45"+
                  "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
                  "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
                  "\1\66\1\67\1\70\1\71\1\72\1\57\1\73\1\74"+
                  "\1\57\1\60\1\75\1\76\1\77\1\100\53\0\1\101"+
                  "\12\0\1\101\4\0\1\101\5\0\27\101\1\102\37\101"+
                  "\1\102\u01ca\101\4\0\14\101\16\0\5\101\7\0\1\101"+
                  "\1\0\1\101\201\0\5\101\1\0\2\101\2\0\4\101"+
                  "\1\0\1\101\6\0\1\101\1\0\3\101\1\0\1\101"+
                  "\1\0\24\101\1\0\123\101\1\0\213\101\10\0\246\101"+
                  "\1\0\46\101\2\0\1\101\6\0\51\101\107\0\33\101"+
                  "\4\0\4\101\55\0\53\101\25\0\12\102\4\0\2\101"+
                  "\1\0\143\101\1\0\1\101\17\0\2\101\7\0\2\101"+
                  "\12\102\3\101\2\0\1\101\20\0\1\101\1\0\36\101"+
                  "\35\0\131\101\13\0\1\101\16\0\12\102\41\101\11\0"+
                  "\2\101\4\0\1\101\5\0\26\101\4\0\1\101\11\0"+
                  "\1\101\3\0\1\101\27\0\31\101\7\0\13\101\65\0"+
                  "\25\101\1\0\10\101\106\0\66\101\3\0\1\101\22\0"+
                  "\1\101\7\0\12\101\4\0\12\102\1\0\20\101\4\0"+
                  "\10\101\2\0\2\101\2\0\26\101\1\0\7\101\1\0"+
                  "\1\101\3\0\4\101\3\0\1\101\20\0\1\101\15\0"+
                  "\2\101\1\0\3\101\4\0\12\102\2\101\12\0\1\101"+
                  "\10\0\6\101\4\0\2\101\2\0\26\101\1\0\7\101"+
                  "\1\0\2\101\1\0\2\101\1\0\2\101\37\0\4\101"+
                  "\1\0\1\101\7\0\12\102\2\0\3\101\20\0\11\101"+
                  "\1\0\3\101\1\0\26\101\1\0\7\101\1\0\2\101"+
                  "\1\0\5\101\3\0\1\101\22\0\1\101\17\0\2\101"+
                  "\4\0\12\102\11\0\1\101\13\0\10\101\2\0\2\101"+
                  "\2\0\26\101\1\0\7\101\1\0\2\101\1\0\5\101"+
                  "\3\0\1\101\36\0\2\101\1\0\3\101\4\0\12\102"+
                  "\1\0\1\101\21\0\1\101\1\0\6\101\3\0\3\101"+
                  "\1\0\4\101\3\0\2\101\1\0\1\101\1\0\2\101"+
                  "\3\0\2\101\3\0\3\101\3\0\14\101\26\0\1\101"+
                  "\25\0\12\102\25\0\10\101\1\0\3\101\1\0\27\101"+
                  "\1\0\20\101\3\0\1\101\32\0\3\101\5\0\2\101"+
                  "\4\0\12\102\20\0\1\101\4\0\10\101\1\0\3\101"+
                  "\1\0\27\101\1\0\12\101\1\0\5\101\3\0\1\101"+
                  "\40\0\1\101\1\0\2\101\4\0\12\102\1\0\2\101"+
                  "\22\0\10\101\1\0\3\101\1\0\51\101\2\0\1\101"+
                  "\20\0\1\101\5\0\3\101\10\0\3\101\4\0\12\102"+
                  "\12\0\6\101\5\0\22\101\3\0\30\101\1\0\11\101"+
                  "\1\0\1\101\2\0\7\101\37\0\12\102\21\0\60\101"+
                  "\1\0\2\101\14\0\7\101\11\0\12\102\47\0\2\101"+
                  "\1\0\1\101\1\0\5\101\1\0\30\101\1\0\1\101"+
                  "\1\0\12\101\1\0\2\101\11\0\1\101\2\0\5\101"+
                  "\1\0\1\101\11\0\12\102\2\0\4\101\40\0\1\101"+
                  "\37\0\12\102\26\0\10\101\1\0\44\101\33\0\5\101"+
                  "\163\0\53\101\24\0\1\101\12\102\6\0\6\101\4\0"+
                  "\4\101\3\0\1\101\3\0\2\101\7\0\3\101\4\0"+
                  "\15\101\14\0\1\101\1\0\12\102\6\0\46\101\1\0"+
                  "\1\101\5\0\1\101\2\0\53\101\1\0\115\101\1\0"+
                  "\4\101\2\0\7\101\1\0\1\101\1\0\4\101\2\0"+
                  "\51\101\1\0\4\101\2\0\41\101\1\0\4\101\2\0"+
                  "\7\101\1\0\1\101\1\0\4\101\2\0\17\101\1\0"+
                  "\71\101\1\0\4\101\2\0\103\101\45\0\20\101\20\0"+
                  "\126\101\2\0\6\101\3\0\u016c\101\2\0\21\101\1\0"+
                  "\32\101\5\0\113\101\6\0\10\101\7\0\15\101\1\0"+
                  "\4\101\16\0\22\101\16\0\22\101\16\0\15\101\1\0"+
                  "\3\101\17\0\64\101\43\0\1\101\4\0\1\101\3\0"+
                  "\12\102\46\0\12\102\6\0\131\101\7\0\5\101\2\0"+
                  "\42\101\1\0\1\101\5\0\106\101\12\0\37\101\47\0"+
                  "\12\102\36\101\2\0\5\101\13\0\54\101\4\0\32\101"+
                  "\6\0\12\102\46\0\27\101\11\0\65\101\53\0\12\102"+
                  "\6\0\12\102\15\0\1\101\135\0\57\101\21\0\7\101"+
                  "\4\0\12\102\51\0\36\101\15\0\2\101\12\102\54\101"+
                  "\32\0\44\101\34\0\12\102\3\0\3\101\12\102\44\101"+
                  "\2\0\11\101\7\0\53\101\2\0\3\101\51\0\4\101"+
                  "\1\0\6\101\1\0\2\101\3\0\1\101\5\0\300\101"+
                  "\100\0\26\101\2\0\6\101\2\0\46\101\2\0\6\101"+
                  "\2\0\10\101\1\0\1\101\1\0\1\101\1\0\1\101"+
                  "\1\0\37\101\2\0\65\101\1\0\7\101\1\0\1\101"+
                  "\3\0\3\101\1\0\7\101\3\0\4\101\2\0\6\101"+
                  "\4\0\15\101\5\0\3\101\1\0\7\101\164\0\1\101"+
                  "\15\0\1\101\20\0\15\101\145\0\1\101\4\0\1\101"+
                  "\2\0\12\101\1\0\1\101\3\0\5\101\6\0\1\101"+
                  "\1\0\1\101\1\0\1\101\1\0\4\101\1\0\13\101"+
                  "\2\0\4\101\5\0\5\101\4\0\1\101\64\0\2\101"+
                  "\u017b\0\57\101\1\0\57\101\1\0\205\101\6\0\4\101"+
                  "\3\0\2\101\14\0\46\101\1\0\1\101\5\0\1\101"+
                  "\2\0\70\101\7\0\1\101\20\0\27\101\11\0\7\101"+
                  "\1\0\7\101\1\0\7\101\1\0\7\101\1\0\7\101"+
                  "\1\0\7\101\1\0\7\101\1\0\7\101\120\0\1\101"+
                  "\325\0\2\101\52\0\5\101\5\0\2\101\4\0\126\101"+
                  "\6\0\3\101\1\0\132\101\1\0\4\101\5\0\53\101"+
                  "\1\0\136\101\21\0\33\101\65\0\306\101\112\0\360\101"+
                  "\20\0\215\101\103\0\56\101\2\0\15\101\3\0\20\101"+
                  "\12\102\2\101\24\0\57\101\20\0\37\101\2\0\106\101"+
                  "\61\0\11\101\2\0\147\101\2\0\65\101\2\0\5\101"+
                  "\60\0\13\101\1\0\3\101\1\0\4\101\1\0\27\101"+
                  "\35\0\64\101\16\0\62\101\34\0\12\102\30\0\6\101"+
                  "\3\0\1\101\1\0\2\101\1\0\12\102\34\101\12\0"+
                  "\27\101\31\0\35\101\7\0\57\101\34\0\1\101\12\102"+
                  "\6\0\5\101\1\0\12\101\12\102\5\101\1\0\51\101"+
                  "\27\0\3\101\1\0\10\101\4\0\12\102\6\0\27\101"+
                  "\3\0\1\101\3\0\62\101\1\0\1\101\3\0\2\101"+
                  "\2\0\5\101\2\0\1\101\1\0\1\101\30\0\3\101"+
                  "\2\0\13\101\7\0\3\101\14\0\6\101\2\0\6\101"+
                  "\2\0\6\101\11\0\7\101\1\0\7\101\1\0\53\101"+
                  "\1\0\14\101\10\0\163\101\15\0\12\102\6\0\244\101"+
                  "\14\0\27\101\4\0\61\101\u0104\0\156\101\2\0\152\101"+
                  "\46\0\7\101\14\0\5\101\5\0\1\101\1\0\12\101"+
                  "\1\0\15\101\1\0\5\101\1\0\1\101\1\0\2\101"+
                  "\1\0\2\101\1\0\154\101\41\0\153\101\22\0\100\101"+
                  "\2\0\66\101\50\0\14\101\164\0\5\101\1\0\207\101"+
                  "\23\0\12\102\7\0\32\101\6\0\32\101\13\0\131\101"+
                  "\3\0\6\101\2\0\6\101\2\0\6\101\2\0\3\101"+
                  "\43\0\14\101\1\0\32\101\1\0\23\101\1\0\2\101"+
                  "\1\0\17\101\2\0\16\101\42\0\173\101\205\0\35\101"+
                  "\3\0\61\101\57\0\40\101\15\0\24\101\1\0\10\101"+
                  "\6\0\46\101\12\0\36\101\2\0\44\101\4\0\10\101"+
                  "\60\0\236\101\2\0\12\102\6\0\44\101\4\0\44\101"+
                  "\4\0\50\101\10\0\64\101\234\0\67\101\11\0\26\101"+
                  "\12\0\10\101\230\0\6\101\2\0\1\101\1\0\54\101"+
                  "\1\0\2\101\3\0\1\101\2\0\27\101\12\0\27\101"+
                  "\11\0\37\101\101\0\23\101\1\0\2\101\12\0\26\101"+
                  "\12\0\32\101\106\0\70\101\6\0\2\101\100\0\1\101"+
                  "\17\0\4\101\1\0\3\101\1\0\35\101\52\0\35\101"+
                  "\3\0\35\101\43\0\10\101\1\0\34\101\33\0\66\101"+
                  "\12\0\26\101\12\0\23\101\15\0\22\101\156\0\111\101"+
                  "\67\0\63\101\15\0\63\101\15\0\44\101\14\0\12\102"+
                  "\306\0\35\101\12\0\1\101\10\0\26\101\232\0\27\101"+
                  "\14\0\65\101\56\0\12\102\23\0\55\101\40\0\31\101"+
                  "\7\0\12\102\11\0\44\101\17\0\12\102\4\0\1\101"+
                  "\13\0\43\101\3\0\1\101\14\0\60\101\16\0\4\101"+
                  "\13\0\12\102\1\101\1\0\1\101\43\0\22\101\1\0"+
                  "\31\101\124\0\7\101\1\0\1\101\1\0\4\101\1\0"+
                  "\17\101\1\0\12\101\7\0\57\101\21\0\12\102\13\0"+
                  "\10\101\2\0\2\101\2\0\26\101\1\0\7\101\1\0"+
                  "\2\101\1\0\5\101\3\0\1\101\22\0\1\101\14\0"+
                  "\5\101\236\0\65\101\22\0\4\101\5\0\12\102\5\0"+
                  "\1\101\40\0\60\101\24\0\2\101\1\0\1\101\10\0"+
                  "\12\102\246\0\57\101\51\0\4\101\44\0\60\101\24\0"+
                  "\1\101\13\0\12\102\46\0\53\101\15\0\1\101\7\0"+
                  "\12\102\66\0\33\101\25\0\12\102\306\0\54\101\164\0"+
                  "\100\101\12\102\25\0\1\101\240\0\10\101\2\0\47\101"+
                  "\20\0\1\101\1\0\1\101\34\0\1\101\12\0\50\101"+
                  "\7\0\1\101\25\0\1\101\13\0\56\101\23\0\1\101"+
                  "\42\0\71\101\7\0\11\101\1\0\45\101\21\0\1\101"+
                  "\17\0\12\102\30\0\36\101\160\0\7\101\1\0\2\101"+
                  "\1\0\46\101\25\0\1\101\11\0\12\102\6\0\6\101"+
                  "\1\0\2\101\1\0\40\101\16\0\1\101\7\0\12\102"+
                  "\u0136\0\23\101\15\0\232\101\346\0\304\101\274\0\57\101"+
                  "\321\0\107\101\271\0\71\101\7\0\37\101\1\0\12\102"+
                  "\146\0\36\101\22\0\60\101\20\0\4\101\14\0\12\102"+
                  "\11\0\25\101\5\0\23\101\260\0\100\101\200\0\113\101"+
                  "\5\0\1\101\102\0\15\101\100\0\2\101\1\0\1\101"+
                  "\34\0\370\101\10\0\363\101\15\0\37\101\61\0\3\101"+
                  "\21\0\4\101\10\0\u018c\101\4\0\153\101\5\0\15\101"+
                  "\3\0\11\101\7\0\12\101\146\0\125\101\1\0\107\101"+
                  "\1\0\2\101\2\0\1\101\2\0\2\101\2\0\4\101"+
                  "\1\0\14\101\1\0\1\101\1\0\7\101\1\0\101\101"+
                  "\1\0\4\101\2\0\10\101\1\0\7\101\1\0\34\101"+
                  "\1\0\4\101\1\0\5\101\1\0\1\101\3\0\7\101"+
                  "\1\0\u0154\101\2\0\31\101\1\0\31\101\1\0\37\101"+
                  "\1\0\31\101\1\0\37\101\1\0\31\101\1\0\37\101"+
                  "\1\0\31\101\1\0\37\101\1\0\31\101\1\0\10\101"+
                  "\2\0\62\102\55\101\12\0\7\101\2\0\12\102\4\0"+
                  "\1\101\u0171\0\54\101\4\0\12\102\6\0\305\101\73\0"+
                  "\104\101\7\0\1\101\4\0\12\102\246\0\4\101\1\0"+
                  "\33\101\1\0\2\101\1\0\1\101\2\0\1\101\1\0"+
                  "\12\101\1\0\4\101\1\0\1\101\1\0\1\101\6\0"+
                  "\1\101\4\0\1\101\1\0\1\101\1\0\1\101\1\0"+
                  "\3\101\1\0\2\101\1\0\1\101\2\0\1\101\1\0"+
                  "\1\101\1\0\1\101\1\0\1\101\1\0\1\101\1\0"+
                  "\2\101\1\0\1\101\2\0\4\101\1\0\7\101\1\0"+
                  "\4\101\1\0\4\101\1\0\1\101\1\0\12\101\1\0"+
                  "\21\101\5\0\3\101\1\0\5\101\1\0\21\101\104\0"+
                  "\327\101\51\0\65\101\13\0\336\101\2\0\u0182\101\16\0"+
                  "\u0131\101\37\0\36\101\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\33\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
                  "\1\4\1\10\1\1\1\11\1\12\3\4\2\13\1\14"+
                  "\1\15\1\16\1\17\1\20\1\4\1\21\1\22\1\23"+
                  "\12\4\1\24\1\25\1\26\1\2\1\27\1\10\1\4"+
                  "\3\30\1\20\1\21\1\22\1\31\1\25\1\2\1\7"+
                  "\1\10\1\32\1\25\1\33\1\34\1\7\1\35\1\36"+
                  "\1\1\1\37\1\40\1\41\1\42\1\43\1\44\1\4"+
                  "\1\45\2\46\1\47\1\50\1\16\1\51\1\52\1\4"+
                  "\1\53\1\22\1\54\1\55\1\25\1\56\1\1\1\57"+
                  "\1\60\1\1\1\4\1\61\1\1\1\7\1\14\4\4"+
                  "\1\6\1\10\1\62\1\14\1\15\1\17\1\20\1\22"+
                  "\1\23\1\4\1\24\1\26\1\11\1\63\1\21\2\1"+
                  "\2\13\1\64\2\4\1\15\1\17\1\65\1\22\2\66"+
                  "\1\67\3\66\1\70\1\71\1\72\1\73\1\74\1\75"+
                  "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
                  "\1\106\1\107\1\22\1\110\1\111\1\112\1\113\1\114"+
                  "\1\113\1\115\1\116\1\7\1\117\1\120\1\2\2\121"+
                  "\4\120\1\122\1\123\1\124\1\122\1\125\1\126\1\1"+
                  "\1\127\1\10\1\117\1\127\2\1\1\130\1\131\1\132"+
                  "\7\0\1\4\1\0\1\6\1\133\2\6\1\134\1\0"+
                  "\1\134\1\135\1\136\1\137\2\140\1\141\2\0\1\142"+
                  "\1\143\1\144\1\4\1\0\1\145\1\146\1\0\1\147"+
                  "\1\150\1\0\1\4\1\151\1\4\1\152\1\4\2\153"+
                  "\1\4\1\154\2\4\1\155\2\4\1\156\7\4\1\157"+
                  "\1\160\1\161\4\30\1\4\1\30\1\4\1\145\1\162"+
                  "\1\163\1\147\1\4\1\0\1\164\1\165\1\166\1\167"+
                  "\1\170\1\136\1\171\1\172\1\0\1\173\1\174\1\175"+
                  "\1\176\1\177\1\200\1\201\1\202\1\0\1\203\1\204"+
                  "\1\0\1\205\1\206\1\207\1\210\1\211\2\0\1\212"+
                  "\1\4\1\213\1\214\1\0\1\212\2\0\1\215\1\216"+
                  "\1\4\1\217\1\4\1\0\1\4\1\133\1\145\1\147"+
                  "\1\0\2\153\1\4\1\143\1\136\2\0\1\4\1\0"+
                  "\1\66\2\0\1\220\1\0\1\221\1\222\1\0\1\223"+
                  "\1\224\1\225\1\226\1\227\1\102\1\230\1\0\2\231"+
                  "\1\0\1\120\1\0\1\120\1\0\1\2\2\232\1\136"+
                  "\1\0\1\125\2\233\1\136\2\0\1\127\14\0\2\4"+
                  "\1\0\3\133\2\0\1\234\1\142\1\235\2\4\2\236"+
                  "\1\0\1\237\1\240\2\241\3\0\1\242\1\243\2\0"+
                  "\2\4\1\0\1\244\1\245\1\0\5\4\1\246\1\4"+
                  "\1\247\6\4\1\250\1\0\1\251\1\142\1\0\3\252"+
                  "\1\253\1\254\1\255\3\0\1\256\1\257\1\4\1\0"+
                  "\1\4\2\0\1\4\1\237\4\0\2\4\7\0\1\2"+
                  "\4\120\3\0\1\142\11\0\1\4\1\0\1\4\2\133"+
                  "\1\142\2\0\1\236\1\0\1\241\1\260\1\0\1\261"+
                  "\3\0\1\262\1\4\1\263\1\264\1\265\1\266\3\4"+
                  "\1\267\1\270\1\271\2\4\1\252\1\0\1\262\1\0"+
                  "\1\272\1\4\4\0\1\4\3\153\1\273\1\102\3\0"+
                  "\1\120\2\0\1\120\6\0\3\4\1\0\1\236\1\241"+
                  "\1\0\1\274\3\0\1\275\2\4\1\276\1\277\1\252"+
                  "\4\0\1\4\1\0\3\4\1\0\1\102\1\300\12\0"+
                  "\1\260\2\0\1\4\1\301\1\0\1\4\1\0\1\4"+
                  "\1\0\1\4\1\302\4\0\1\4\1\274\3\0\1\262"+
                  "\1\4\1\0\3\4\2\0\1\303\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[615];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
                  "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
                  "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
                  "\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0711\0\u0797\0\u07da"+
                  "\0\u0711\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u0711"+
                  "\0\u09af\0\u09f2\0\u0a35\0\u08a3\0\u0a78\0\u0711\0\u0abb\0\u0711"+
                  "\0\u0afe\0\u07da\0\u0b41\0\u0b84\0\u0bc7\0\u0711\0\u0c0a\0\u0c4d"+
                  "\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65"+
                  "\0\u0711\0\u0ea8\0\u0711\0\u0eeb\0\u0f2e\0\u0711\0\u0f71\0\u0fb4"+
                  "\0\u0ff7\0\u103a\0\u08a3\0\u08a3\0\u107d\0\u08a3\0\u10c0\0\u1103"+
                  "\0\u1146\0\u1189\0\u0711\0\u11cc\0\u120f\0\u0711\0\u1252\0\u1295"+
                  "\0\u12d8\0\u131b\0\u0711\0\u135e\0\u13a1\0\u13e4\0\u0711\0\u1427"+
                  "\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u146a\0\u1576\0\u15b9\0\u15fc"+
                  "\0\u146a\0\u163f\0\u0711\0\u1682\0\u0711\0\u16c5\0\u1708\0\u0711"+
                  "\0\u174b\0\u0711\0\u0711\0\u15b9\0\u178e\0\u17d1\0\u1814\0\u1857"+
                  "\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1963\0\u0711"+
                  "\0\u1963\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1963\0\u1b38\0\u1963"+
                  "\0\u1963\0\u1b7b\0\u0711\0\u0711\0\u1bbe\0\u1c01\0\u0711\0\u1c44"+
                  "\0\u0711\0\u1c87\0\u1cca\0\u0fb4\0\u103a\0\u0711\0\u1d0d\0\u0711"+
                  "\0\u0754\0\u0711\0\u1d50\0\u1d93\0\u1dd6\0\u0711\0\u1e19\0\u1e5c"+
                  "\0\u0711\0\u1e19\0\u1e19\0\u1e9f\0\u0711\0\u0711\0\u1ee2\0\u1f25"+
                  "\0\u1f68\0\u0711\0\u1e19\0\u1e19\0\u1fab\0\u1fee\0\u2031\0\u2074"+
                  "\0\u0711\0\u20b7\0\u0711\0\u20fa\0\u0711\0\u213d\0\u2180\0\u1d93"+
                  "\0\u21c3\0\u2206\0\u0711\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355"+
                  "\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u0711\0\u24e7\0\u252a"+
                  "\0\u256d\0\u25b0\0\u0711\0\u25f3\0\u2636\0\u2679\0\u0711\0\u0711"+
                  "\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891"+
                  "\0\u107d\0\u28d4\0\u2917\0\u295a\0\u299d\0\u0711\0\u29e0\0\u2a23"+
                  "\0\u0711\0\u2a66\0\u0711\0\u0711\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72"+
                  "\0\u0711\0\u2bb5\0\u0711\0\u2bf8\0\u2c3b\0\u2c7e\0\u0711\0\u2cc1"+
                  "\0\u2d04\0\u0711\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u2e96"+
                  "\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u0b41\0\u306b"+
                  "\0\u30ae\0\u0b41\0\u30f1\0\u3134\0\u3177\0\u31ba\0\u31fd\0\u3240"+
                  "\0\u3283\0\u0711\0\u0711\0\u0711\0\u0711\0\u08a3\0\u32c6\0\u3309"+
                  "\0\u3309\0\u334c\0\u338f\0\u33d2\0\u0711\0\u0711\0\u0711\0\u3415"+
                  "\0\u3458\0\u0711\0\u0711\0\u0711\0\u0711\0\u0711\0\u349b\0\u0711"+
                  "\0\u0711\0\u34de\0\u0711\0\u0711\0\u0711\0\u0711\0\u0711\0\u0711"+
                  "\0\u3521\0\u0711\0\u1682\0\u0711\0\u3564\0\u35a7\0\u35ea\0\u0711"+
                  "\0\u0711\0\u0711\0\u362d\0\u174b\0\u3670\0\u36b3\0\u36f6\0\u0711"+
                  "\0\u0711\0\u1814\0\u0711\0\u3739\0\u377c\0\u0711\0\u37bf\0\u3802"+
                  "\0\u0b41\0\u3845\0\u3888\0\u38cb\0\u390e\0\u3951\0\u1963\0\u3994"+
                  "\0\u39d7\0\u3a1a\0\u3a5d\0\u0711\0\u0711\0\u3aa0\0\u1d0d\0\u3ae3"+
                  "\0\u3b26\0\u3b69\0\u3bac\0\u3bef\0\u0711\0\u3c32\0\u0711\0\u0711"+
                  "\0\u1fee\0\u0711\0\u0711\0\u0711\0\u0711\0\u0711\0\u3c75\0\u0711"+
                  "\0\u3cb8\0\u0711\0\u20b7\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4\0\u3e07"+
                  "\0\u3e4a\0\u0711\0\u3e8d\0\u3ed0\0\u3f13\0\u0711\0\u0711\0\u3f56"+
                  "\0\u3f99\0\u25f3\0\u3fdc\0\u401f\0\u4062\0\u40a5\0\u40e8\0\u412b"+
                  "\0\u416e\0\u41b1\0\u41f4\0\u4237\0\u0711\0\u427a\0\u42bd\0\u4300"+
                  "\0\u4343\0\u4386\0\u43c9\0\u0711\0\u440c\0\u444f\0\u4492\0\u2a66"+
                  "\0\u0711\0\u44d5\0\u0711\0\u4518\0\u0711\0\u455b\0\u459e\0\u45e1"+
                  "\0\u0711\0\u0711\0\u4624\0\u4667\0\u46aa\0\u46ed\0\u36b3\0\u4730"+
                  "\0\u0711\0\u4773\0\u47b6\0\u47f9\0\u483c\0\u487f\0\u0711\0\u0711"+
                  "\0\u0bc7\0\u48c2\0\u4905\0\u4948\0\u498b\0\u49ce\0\u0b41\0\u4a11"+
                  "\0\u0b41\0\u4a54\0\u4a97\0\u4ada\0\u4b1d\0\u4b60\0\u4ba3\0\u0711"+
                  "\0\u349b\0\u0711\0\u4be6\0\u3521\0\u0711\0\u4c29\0\u4c6c\0\u35a7"+
                  "\0\u0711\0\u0711\0\u4caf\0\u4cf2\0\u4d35\0\u0711\0\u0711\0\u4d78"+
                  "\0\u4dbb\0\u4dfe\0\u4e41\0\u4e84\0\u4ec7\0\u1963\0\u4f0a\0\u4f4d"+
                  "\0\u4f90\0\u4fd3\0\u5016\0\u5059\0\u1bbe\0\u44d5\0\u509c\0\u50df"+
                  "\0\u5122\0\u5165\0\u51a8\0\u51eb\0\u522e\0\u5271\0\u52b4\0\u52f7"+
                  "\0\u3ed0\0\u533a\0\u3f99\0\u537d\0\u53c0\0\u5403\0\u5446\0\u5489"+
                  "\0\u4062\0\u54cc\0\u550f\0\u5552\0\u5595\0\u55d8\0\u561b\0\u565e"+
                  "\0\u08a3\0\u56a1\0\u29e0\0\u56e4\0\u5727\0\u576a\0\u57ad\0\u57f0"+
                  "\0\u5833\0\u5876\0\u0711\0\u58b9\0\u58fc\0\u593f\0\u08a3\0\u5982"+
                  "\0\u0b41\0\u0b41\0\u0b41\0\u0b41\0\u59c5\0\u5a08\0\u5a4b\0\u0b41"+
                  "\0\u0b41\0\u0b41\0\u5a8e\0\u5ad1\0\u5b14\0\u5b57\0\u0711\0\u5b9a"+
                  "\0\u0b41\0\u5bdd\0\u5c20\0\u5c63\0\u5ca6\0\u5ce9\0\u5d2c\0\u3b69"+
                  "\0\u5d6f\0\u5db2\0\u1963\0\u5df5\0\u5e38\0\u5e7b\0\u5ebe\0\u5f01"+
                  "\0\u5f44\0\u5f87\0\u5fca\0\u600d\0\u6050\0\u6093\0\u60d6\0\u6119"+
                  "\0\u615c\0\u619f\0\u61e2\0\u6225\0\u6268\0\u62ab\0\u62ee\0\u6331"+
                  "\0\u6374\0\u63b7\0\u63fa\0\u643d\0\u0b41\0\u6480\0\u64c3\0\u0b41"+
                  "\0\u0b41\0\u5b57\0\u6506\0\u6549\0\u658c\0\u65cf\0\u6612\0\u6655"+
                  "\0\u6698\0\u66db\0\u1af5\0\u1e19\0\u671e\0\u0711\0\u6761\0\u67a4"+
                  "\0\u67e7\0\u682a\0\u686d\0\u686d\0\u68b0\0\u68f3\0\u6936\0\u6979"+
                  "\0\u69bc\0\u69ff\0\u6a42\0\u6a85\0\u0b41\0\u6ac8\0\u6b0b\0\u6b4e"+
                  "\0\u6b91\0\u6bd4\0\u6c17\0\u0711\0\u6c5a\0\u6c9d\0\u6ce0\0\u6d23"+
                  "\0\u6979\0\u6d66\0\u6da9\0\u6dec\0\u6e2f\0\u58fc\0\u6e72\0\u6eb5"+
                  "\0\u6eb5\0\u6ef8\0\u6f3b\0\u6f7e\0\u6fc1\0\u0b41\0\u7004";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[615];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\34\1\35\1\36\1\37\1\35\1\40\1\41\1\42"+
                  "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
                  "\1\44\1\53\2\44\1\54\2\55\1\44\1\56\1\57"+
                  "\1\60\1\61\1\51\1\62\3\63\1\64\1\65\2\44"+
                  "\1\66\2\63\1\67\1\70\1\71\1\72\2\63\1\73"+
                  "\2\63\1\74\6\63\1\75\1\76\1\77\1\100\1\63"+
                  "\1\101\1\102\1\103\1\44\1\63\1\44\1\34\1\35"+
                  "\1\36\1\37\1\104\1\105\1\41\1\44\1\43\1\44"+
                  "\1\106\1\46\1\47\1\34\3\44\1\107\6\44\1\56"+
                  "\1\110\1\111\1\112\1\44\1\113\3\44\1\114\1\115"+
                  "\1\116\1\44\1\66\27\44\1\101\1\117\1\103\3\44"+
                  "\1\34\1\35\1\36\1\37\1\120\1\105\1\41\1\44"+
                  "\1\121\1\44\1\122\1\46\1\123\1\50\3\44\1\107"+
                  "\6\44\1\56\1\110\1\111\1\112\1\44\1\113\4\44"+
                  "\1\115\2\44\1\66\27\44\1\101\1\124\1\103\3\44"+
                  "\1\34\1\35\1\36\1\37\1\35\1\125\1\41\1\126"+
                  "\1\127\1\130\1\131\1\132\1\133\1\134\1\135\1\136"+
                  "\1\137\1\140\1\141\1\142\1\143\2\144\1\145\1\56"+
                  "\1\146\1\147\1\150\1\151\1\141\3\152\1\153\1\154"+
                  "\1\155\1\156\1\66\27\152\1\101\1\157\1\103\1\160"+
                  "\1\161\2\34\1\35\1\36\1\37\1\35\1\125\1\41"+
                  "\1\126\1\127\1\130\1\131\1\132\1\133\1\134\1\135"+
                  "\1\136\1\137\1\140\1\141\1\142\1\143\2\144\1\145"+
                  "\1\56\1\146\1\147\1\150\1\151\1\141\3\152\1\162"+
                  "\1\154\1\163\1\156\1\66\27\152\1\101\1\157\1\103"+
                  "\1\160\1\161\2\34\1\35\1\36\1\37\1\35\1\125"+
                  "\1\41\1\126\1\127\1\130\1\131\1\132\1\133\1\134"+
                  "\1\135\1\136\1\137\1\140\1\141\1\142\1\143\2\144"+
                  "\1\145\1\56\1\146\1\164\1\150\1\151\1\141\3\165"+
                  "\1\34\1\154\1\166\1\156\1\66\27\165\1\101\1\157"+
                  "\1\103\1\160\1\167\2\34\1\35\1\36\1\37\1\35"+
                  "\1\40\1\41\1\42\1\170\1\44\1\45\1\46\1\47"+
                  "\1\50\1\51\1\52\4\44\1\54\2\55\1\44\1\171"+
                  "\1\57\1\60\1\61\1\51\1\62\3\63\1\64\1\65"+
                  "\2\44\1\66\2\63\1\67\1\70\1\172\1\72\2\63"+
                  "\1\173\2\63\1\74\6\63\1\75\1\76\1\77\1\100"+
                  "\1\63\1\101\1\102\1\103\1\44\1\63\1\44\1\174"+
                  "\1\35\1\36\1\37\1\35\1\175\1\41\1\176\1\43"+
                  "\1\174\1\177\1\46\1\123\1\200\2\175\10\174\1\201"+
                  "\1\202\1\174\1\203\1\175\1\204\4\174\1\205\2\174"+
                  "\1\206\4\174\1\207\22\174\1\210\1\117\1\211\3\174"+
                  "\1\34\1\35\1\36\1\37\1\35\1\40\1\41\1\42"+
                  "\1\43\1\44\1\45\1\46\1\212\1\213\1\51\1\52"+
                  "\4\44\1\54\2\55\1\44\1\56\1\57\1\60\1\61"+
                  "\1\51\1\62\3\63\1\64\1\65\2\44\1\66\2\63"+
                  "\1\67\1\70\1\71\1\72\2\63\1\73\2\63\1\74"+
                  "\6\63\1\75\1\76\1\77\1\100\1\63\1\101\1\102"+
                  "\1\103\1\44\1\63\1\44\14\34\1\47\24\34\1\214"+
                  "\51\34\1\215\2\34\1\216\10\34\1\217\2\220\12\34"+
                  "\1\221\35\34\1\103\4\34\1\35\1\36\1\37\1\35"+
                  "\1\34\1\41\1\176\1\170\2\222\1\46\1\123\1\200"+
                  "\1\222\1\223\11\222\1\224\1\60\1\225\5\222\1\226"+
                  "\1\227\1\34\1\222\1\66\27\222\1\101\1\117\1\103"+
                  "\2\222\1\34\1\230\1\231\2\230\1\231\1\230\1\232"+
                  "\1\230\1\233\2\230\1\234\26\230\1\235\2\230\1\236"+
                  "\35\230\1\34\1\35\1\36\1\37\1\35\1\237\1\41"+
                  "\1\240\1\43\1\241\1\106\1\46\1\47\1\34\1\242"+
                  "\1\243\1\244\1\245\1\246\1\247\3\250\1\251\1\56"+
                  "\1\224\1\252\1\225\1\253\1\254\3\250\1\255\1\256"+
                  "\1\155\1\257\1\66\27\250\1\260\1\117\1\261\3\34"+
                  "\23\262\1\263\16\262\1\264\34\262\1\263\3\262\23\34"+
                  "\1\265\53\34\1\263\3\34\77\266\1\263\3\266\1\34"+
                  "\1\35\1\36\1\37\1\35\1\40\1\41\1\42\1\267"+
                  "\1\44\1\45\1\270\1\47\1\34\1\51\1\52\4\44"+
                  "\1\54\2\55\1\44\1\56\1\57\1\60\1\61\1\51"+
                  "\1\62\3\63\1\64\1\65\2\44\1\66\2\63\1\67"+
                  "\1\70\1\71\1\72\2\63\1\73\2\63\1\74\6\63"+
                  "\1\75\1\76\1\77\1\100\1\63\1\101\1\102\1\103"+
                  "\1\44\1\63\1\44\1\271\1\272\1\273\1\274\1\272"+
                  "\1\271\1\275\1\271\1\276\1\271\1\34\1\277\14\271"+
                  "\1\34\11\271\1\300\33\271\1\34\4\271\2\301\2\302"+
                  "\4\301\1\303\2\301\1\304\26\301\1\305\40\301\1\34"+
                  "\1\35\1\36\1\37\1\35\1\40\1\41\1\42\1\43"+
                  "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\4\44"+
                  "\1\54\2\55\1\44\1\56\1\57\1\60\1\61\1\51"+
                  "\1\62\3\63\1\64\1\65\2\44\1\66\2\63\1\67"+
                  "\1\70\1\71\1\72\2\63\1\73\2\63\1\74\6\63"+
                  "\1\75\1\76\1\77\1\100\1\63\1\101\1\102\1\103"+
                  "\1\44\1\63\1\44\1\34\1\306\1\36\1\37\1\306"+
                  "\1\34\1\41\1\34\1\307\1\310\1\311\1\312\1\123"+
                  "\1\263\12\310\1\56\3\34\5\310\1\313\1\314\1\313"+
                  "\1\310\1\66\27\310\1\313\1\315\1\313\3\310\13\316"+
                  "\1\317\31\316\1\320\35\316\36\0\3\321\5\0\27\321"+
                  "\4\0\1\321\44\0\1\322\47\0\1\323\2\0\1\324"+
                  "\166\0\1\325\150\0\1\326\42\0\1\36\105\0\1\44"+
                  "\1\0\1\44\1\0\1\44\2\0\1\327\1\0\12\44"+
                  "\4\0\5\44\1\330\1\331\2\44\1\0\27\44\3\0"+
                  "\3\44\2\332\2\0\1\332\1\333\1\332\1\334\1\332"+
                  "\1\334\4\332\12\334\4\332\6\334\1\335\2\334\1\332"+
                  "\27\334\3\332\3\334\5\0\1\336\1\41\2\336\2\0"+
                  "\1\337\2\0\1\336\2\0\1\336\2\0\3\336\5\0"+
                  "\2\336\3\340\1\341\4\0\27\340\1\342\3\0\1\340"+
                  "\6\0\1\44\1\0\1\44\1\0\1\44\4\0\12\44"+
                  "\4\0\6\44\1\331\2\44\1\0\27\44\3\0\3\44"+
                  "\12\0\1\343\6\0\1\344\2\0\1\344\2\345\4\0"+
                  "\1\346\47\0\10\347\1\350\2\347\1\351\67\347\14\0"+
                  "\1\352\73\0\1\40\1\0\1\44\1\0\1\44\2\0"+
                  "\1\327\1\0\1\51\1\40\10\44\4\0\1\51\1\40"+
                  "\3\44\1\330\1\331\2\44\1\0\27\44\3\0\3\44"+
                  "\5\0\1\44\1\0\1\44\1\0\1\44\2\0\1\327"+
                  "\1\0\12\44\2\0\1\353\1\0\5\44\1\330\1\331"+
                  "\2\44\1\0\27\44\3\0\3\44\5\0\1\44\1\0"+
                  "\1\44\1\0\1\44\4\0\12\44\4\0\6\44\1\331"+
                  "\2\44\1\0\27\354\3\0\3\44\5\0\1\44\1\0"+
                  "\1\44\1\0\1\44\4\0\6\44\3\55\1\44\4\0"+
                  "\6\44\1\331\2\44\1\0\27\44\3\0\3\44\12\0"+
                  "\1\355\16\0\1\356\1\0\1\357\61\0\1\360\20\0"+
                  "\1\361\42\0\1\362\11\0\1\44\1\0\1\44\1\363"+
                  "\1\44\4\0\1\44\1\364\4\44\3\63\1\44\2\0"+
                  "\1\365\1\0\2\44\3\63\1\366\1\331\2\44\1\0"+
                  "\27\63\1\363\1\0\1\363\1\44\1\63\1\44\4\0"+
                  "\1\367\1\44\1\0\1\44\1\0\1\44\4\0\12\44"+
                  "\4\0\5\44\1\370\1\331\2\44\1\0\27\44\3\0"+
                  "\5\44\1\371\1\372\77\44\5\0\1\44\1\0\1\44"+
                  "\1\363\1\44\4\0\1\44\1\364\4\44\3\63\1\44"+
                  "\2\0\1\365\1\0\2\44\3\63\1\366\1\331\2\44"+
                  "\1\0\1\373\26\63\1\363\1\0\1\363\1\44\1\63"+
                  "\1\44\5\0\1\44\1\0\1\44\1\363\1\44\4\0"+
                  "\1\44\1\364\4\44\3\63\1\44\2\0\1\365\1\0"+
                  "\2\44\3\63\1\366\1\331\2\44\1\0\16\63\1\374"+
                  "\10\63\1\363\1\0\1\363\1\44\1\63\1\44\5\0"+
                  "\1\44\1\0\1\44\1\363\1\44\4\0\1\44\1\364"+
                  "\4\44\3\63\1\44\2\0\1\365\1\0\2\44\3\63"+
                  "\1\366\1\331\2\44\1\0\13\63\1\375\1\63\1\376"+
                  "\11\63\1\363\1\0\1\363\1\44\1\63\1\44\5\0"+
                  "\1\44\1\0\1\44\1\363\1\44\4\0\1\44\1\364"+
                  "\4\44\3\63\1\44\2\0\1\365\1\0\2\44\3\63"+
                  "\1\366\1\331\2\44\1\0\10\63\1\377\5\63\1\u0100"+
                  "\5\63\1\u0101\2\63\1\363\1\0\1\363\1\44\1\63"+
                  "\1\44\5\0\1\44\1\0\1\44\1\363\1\44\4\0"+
                  "\1\44\1\364\4\44\3\63\1\44\2\0\1\365\1\0"+
                  "\2\44\3\63\1\366\1\331\2\44\1\0\5\63\1\u0102"+
                  "\21\63\1\363\1\0\1\363\1\44\1\63\1\44\5\0"+
                  "\1\44\1\0\1\44\1\363\1\44\4\0\1\44\1\364"+
                  "\4\44\3\63\1\44\2\0\1\365\1\0\2\44\3\63"+
                  "\1\366\1\331\2\44\1\0\4\63\1\u0103\22\63\1\363"+
                  "\1\0\1\363\1\44\1\63\1\44\5\0\1\44\1\0"+
                  "\1\44\1\363\1\44\4\0\1\44\1\364\4\44\3\63"+
                  "\1\44\2\0\1\365\1\0\2\44\3\63\1\366\1\331"+
                  "\2\44\1\0\4\63\1\u0104\22\63\1\363\1\0\1\363"+
                  "\1\44\1\63\1\44\5\0\1\44\1\0\1\44\1\363"+
                  "\1\44\4\0\1\44\1\364\4\44\3\63\1\44\2\0"+
                  "\1\365\1\0\2\44\3\63\1\366\1\331\2\44\1\0"+
                  "\7\63\1\u0105\1\u0106\10\63\1\u0107\5\63\1\363\1\0"+
                  "\1\363\1\44\1\63\1\44\5\0\1\44\1\0\1\44"+
                  "\1\363\1\44\4\0\1\44\1\364\4\44\3\63\1\44"+
                  "\2\0\1\365\1\0\2\44\3\63\1\366\1\331\2\44"+
                  "\1\0\15\63\1\u0108\11\63\1\363\1\0\1\363\1\44"+
                  "\1\63\1\44\5\0\1\44\1\0\1\44\1\363\1\44"+
                  "\4\0\1\44\1\364\4\44\3\63\1\44\2\0\1\365"+
                  "\1\0\2\44\3\63\1\366\1\331\2\44\1\0\7\63"+
                  "\1\u0109\17\63\1\363\1\0\1\363\1\44\1\63\1\44"+
                  "\12\0\1\u010a\63\0\1\u010b\46\0\1\326\1\u010c\44\0"+
                  "\1\44\1\0\1\44\1\0\1\44\4\0\12\44\2\0"+
                  "\1\u010d\1\0\6\44\1\331\2\44\1\0\27\44\3\0"+
                  "\3\44\5\0\1\44\1\0\1\44\1\0\1\44\4\0"+
                  "\12\44\4\0\3\44\1\u010e\2\44\1\331\2\44\1\0"+
                  "\4\u010e\1\u010f\1\u010e\1\u0110\1\u010e\2\44\1\u010e\1\u0111"+
                  "\1\44\1\u0110\1\u0112\1\u010e\1\u0113\6\u010e\3\0\3\44"+
                  "\31\0\1\u0114\103\0\1\u0115\45\0\1\u0116\35\0\1\u0117"+
                  "\47\0\3\44\1\u0118\77\44\12\0\1\u010a\132\0\1\326"+
                  "\1\u0119\44\0\1\336\1\41\2\336\2\0\1\337\1\u011a"+
                  "\1\0\1\336\2\0\1\336\2\0\3\336\5\0\2\336"+
                  "\3\340\1\341\4\0\27\340\1\342\3\0\1\340\13\0"+
                  "\1\u011b\102\0\1\u010a\63\0\1\u011c\36\0\1\u011d\55\0"+
                  "\1\336\1\41\2\336\2\0\1\337\1\u011e\1\0\1\336"+
                  "\2\0\1\336\2\0\3\336\5\0\2\336\3\340\1\u011e"+
                  "\4\0\27\340\1\u011f\3\0\1\340\33\0\1\u0120\62\0"+
                  "\1\343\17\0\1\u0121\50\0\10\347\1\u0122\2\347\1\351"+
                  "\67\347\15\0\1\u0123\103\0\1\u0124\13\0\1\u0125\10\0"+
                  "\1\u0126\56\0\1\u0127\12\0\1\u0128\71\0\1\u0129\10\0"+
                  "\1\u012a\55\0\1\141\1\0\1\141\12\0\1\141\1\0"+
                  "\4\141\4\0\5\141\1\0\1\u012b\3\0\27\141\40\0"+
                  "\1\u012c\74\0\2\u012d\46\0\1\u012e\32\0\3\144\105\0"+
                  "\1\u012f\1\u0130\102\0\1\u0131\102\0\1\u0132\1\u0133\54\0"+
                  "\1\141\1\0\1\141\1\u0134\6\0\1\u0135\2\0\1\141"+
                  "\1\0\3\152\1\141\2\0\1\365\1\0\2\141\3\152"+
                  "\1\u0136\1\u012b\3\0\27\152\1\u0134\1\0\1\u0134\1\0"+
                  "\1\u0134\1\0\3\141\1\u0137\77\141\32\0\1\u0138\62\0"+
                  "\1\u010a\17\0\1\u0139\43\0\1\u010b\14\0\1\u0134\6\0"+
                  "\1\u0135\4\0\3\u0134\3\0\1\365\3\0\3\u0134\1\u0136"+
                  "\4\0\30\u0134\1\0\1\u0134\1\0\1\u0134\6\0\1\141"+
                  "\1\0\1\141\1\u013a\11\0\1\141\1\0\3\165\1\141"+
                  "\4\0\2\141\3\165\1\u013b\1\u012b\3\0\27\165\1\u013a"+
                  "\1\0\1\u013a\1\0\1\u013a\20\0\1\u013c\12\0\1\u013d"+
                  "\60\0\1\u013a\13\0\3\u013a\7\0\3\u013a\1\u013b\4\0"+
                  "\30\u013a\1\0\1\u013a\1\0\1\u013a\6\0\1\336\1\41"+
                  "\2\336\2\0\1\337\1\u011e\1\0\1\336\2\0\1\336"+
                  "\2\0\3\336\5\0\2\336\3\340\1\u011e\4\0\27\340"+
                  "\1\342\3\0\1\340\13\0\1\u013e\15\0\1\u013f\57\0"+
                  "\1\44\1\0\1\44\1\363\1\44\4\0\1\44\1\364"+
                  "\4\44\3\63\1\44\2\0\1\365\1\0\2\44\3\63"+
                  "\1\366\1\331\2\44\1\0\13\63\1\375\1\63\1\376"+
                  "\4\63\1\u0140\4\63\1\363\1\0\1\363\1\44\1\63"+
                  "\1\44\5\0\1\44\1\0\1\44\1\363\1\44\4\0"+
                  "\1\44\1\364\4\44\3\63\1\44\2\0\1\365\1\0"+
                  "\2\44\3\63\1\366\1\331\2\44\1\0\5\63\1\u0102"+
                  "\7\63\1\u0141\11\63\1\363\1\0\1\363\1\44\1\63"+
                  "\1\44\1\174\4\0\1\175\1\0\1\174\1\0\2\174"+
                  "\3\0\2\175\10\174\1\0\3\174\2\175\4\174\1\u0142"+
                  "\2\174\1\0\30\174\1\0\5\174\4\0\1\175\1\0"+
                  "\1\174\1\0\2\174\1\0\1\u0143\1\0\2\175\10\174"+
                  "\1\0\3\174\2\175\3\174\1\u0144\1\u0142\2\174\1\0"+
                  "\30\174\1\0\4\174\2\332\2\0\1\332\1\u0145\75\332"+
                  "\1\174\4\0\1\175\1\0\1\174\1\0\2\174\3\0"+
                  "\2\175\10\174\1\0\1\u0146\2\174\2\175\4\174\1\u0142"+
                  "\2\174\1\0\30\174\1\0\5\174\4\0\1\175\1\0"+
                  "\1\174\1\0\2\174\3\0\2\175\10\174\1\0\2\174"+
                  "\1\u0147\2\175\4\174\1\u0142\2\174\1\0\30\174\1\0"+
                  "\5\174\4\0\1\175\1\0\1\174\1\0\2\174\1\0"+
                  "\1\u0148\1\0\2\175\10\174\1\0\3\174\2\175\3\174"+
                  "\1\u0144\1\u0142\2\174\1\0\30\174\1\0\6\174\1\u0149"+
                  "\1\u014a\1\174\1\175\10\174\2\175\14\174\2\175\4\174"+
                  "\1\u0142\41\174\4\0\1\175\1\0\1\174\1\0\2\174"+
                  "\3\0\2\175\10\174\1\0\3\174\2\175\4\174\1\u0142"+
                  "\2\174\1\0\22\174\1\u014b\5\174\1\0\4\174\14\0"+
                  "\1\u014c\163\0\1\u014d\15\0\1\u014e\116\0\3\220\61\0"+
                  "\1\222\1\0\4\222\3\0\13\222\3\0\5\222\1\0"+
                  "\1\u014f\1\0\1\222\1\0\27\222\3\0\2\222\6\0"+
                  "\1\222\1\0\4\222\3\0\13\222\1\0\1\353\1\0"+
                  "\5\222\1\0\1\u014f\1\0\1\222\1\0\27\222\3\0"+
                  "\2\222\1\0\3\222\1\u0150\77\222\5\0\1\336\1\0"+
                  "\2\336\3\0\1\u011e\1\0\1\336\2\0\1\336\2\0"+
                  "\3\336\5\0\2\336\3\340\1\u011e\4\0\27\340\1\342"+
                  "\3\0\1\340\11\0\1\u0151\72\0\2\230\1\u0149\1\u0152"+
                  "\77\230\14\0\1\u0153\24\0\1\u0154\50\0\1\u0155\26\0"+
                  "\3\u0156\5\0\27\u0156\4\0\1\u0156\21\0\1\u0157\105\0"+
                  "\1\u0158\103\0\3\250\7\0\3\250\1\0\1\u0159\3\0"+
                  "\27\250\25\0\1\u015a\1\0\1\u015b\10\0\1\u015c\1\0"+
                  "\1\u015d\64\0\1\u015e\16\0\1\u015e\45\0\3\250\1\u015f"+
                  "\77\250\44\0\1\u0160\45\0\1\u0161\73\0\23\262\1\u0162"+
                  "\16\262\1\264\34\262\1\0\26\262\1\u0163\16\262\1\264"+
                  "\40\262\77\266\1\0\3\266\5\0\1\336\1\41\2\336"+
                  "\5\0\1\336\2\0\1\336\2\0\3\336\5\0\2\336"+
                  "\3\340\1\341\4\0\27\340\1\342\3\0\1\340\1\0"+
                  "\1\271\4\0\5\271\1\0\15\271\1\0\45\271\1\0"+
                  "\4\271\1\0\1\272\2\0\1\272\35\0\1\u0164\42\0"+
                  "\1\273\100\0\1\u0165\4\u0166\1\u0165\1\271\3\u0165\1\u0166"+
                  "\15\u0165\1\u0166\45\u0165\1\u0166\4\u0165\1\271\4\0\1\271"+
                  "\1\275\3\271\1\0\1\277\14\271\1\0\45\271\1\0"+
                  "\4\271\1\u0167\4\u0168\5\u0167\1\u0168\1\271\14\u0167\1\u0168"+
                  "\45\u0167\1\u0168\4\u0167\1\271\1\0\1\35\1\u0169\1\0"+
                  "\5\271\1\0\15\271\1\0\45\271\1\0\4\271\2\301"+
                  "\2\0\4\301\1\0\31\301\1\0\40\301\2\0\2\302"+
                  "\104\0\1\u016a\1\0\2\u016a\3\0\1\u011e\1\0\1\u016a"+
                  "\2\0\1\u016a\2\0\3\u016a\5\0\2\u016a\3\u016b\1\u011e"+
                  "\4\0\27\u016b\1\u016c\3\0\1\u016b\1\0\2\301\2\0"+
                  "\4\301\1\u016d\31\301\1\0\40\301\10\0\1\u016e\77\0"+
                  "\1\u016f\1\41\2\u016f\2\0\1\337\1\u011e\1\0\1\u016f"+
                  "\2\0\1\u016f\2\0\3\u016f\5\0\2\u016f\3\u0170\1\u011e"+
                  "\4\0\27\u0170\1\u0171\3\0\1\u0170\6\0\1\310\1\0"+
                  "\1\310\1\0\1\310\4\0\12\310\4\0\6\310\1\u0172"+
                  "\2\310\1\0\27\310\3\0\3\310\12\0\1\343\70\0"+
                  "\10\347\1\u0173\2\347\1\351\67\347\3\310\1\u0174\77\310"+
                  "\76\0\1\u010b\4\0\13\316\1\0\31\316\1\0\35\316"+
                  "\10\0\1\321\13\0\3\321\7\0\3\321\5\0\30\321"+
                  "\1\0\1\321\1\0\1\321\1\0\2\u0175\1\u0176\2\u0175"+
                  "\1\u0177\1\u0175\1\u0177\1\u0178\5\u0175\1\u0179\1\u017a\1\u0175"+
                  "\1\u0179\1\u017a\1\u0175\3\u0179\1\u017a\4\u0175\5\u0179\5\u0175"+
                  "\27\u0179\1\u017b\1\u0175\1\u017c\1\u0175\1\u0178\1\u0175\75\0"+
                  "\1\u017d\15\0\1\u017e\101\0\2\325\5\0\1\325\5\0"+
                  "\3\325\7\0\4\325\1\0\1\325\2\0\30\325\3\0"+
                  "\1\325\3\0\1\35\1\u0169\77\0\15\u017f\1\0\65\u017f"+
                  "\5\u0180\1\u0181\1\u0180\1\u0181\1\u0180\1\u0181\4\u0180\12\u0181"+
                  "\4\u0180\5\u0181\1\u0182\1\u0183\2\u0181\1\u0180\27\u0181\3\u0180"+
                  "\3\u0181\2\332\2\0\77\332\2\u0145\1\u0184\1\u0185\1\u0145"+
                  "\1\333\1\u0145\1\333\1\u0145\1\333\4\u0145\12\333\4\u0145"+
                  "\6\333\1\u0186\2\333\1\u0145\27\333\3\u0145\3\333\2\332"+
                  "\2\0\1\332\1\334\1\332\1\334\1\332\1\334\4\332"+
                  "\12\334\4\332\6\334\1\335\2\334\1\332\27\334\3\332"+
                  "\5\334\1\44\1\u0118\77\334\13\337\1\351\26\337\1\u0187"+
                  "\40\337\10\0\1\340\13\0\3\340\7\0\3\340\5\0"+
                  "\30\340\1\0\1\340\1\0\1\340\10\0\2\u0188\5\0"+
                  "\1\u0188\5\0\3\u0188\7\0\4\u0188\1\0\1\u0188\2\0"+
                  "\30\u0188\1\0\1\336\1\0\1\u0188\25\0\3\345\107\0"+
                  "\1\u0189\47\0\13\347\1\351\102\347\1\u018a\67\347\14\0"+
                  "\1\u018b\73\0\1\44\1\0\1\44\1\0\1\44\4\0"+
                  "\12\44\4\0\1\44\1\u018c\4\44\1\331\2\44\1\0"+
                  "\27\44\1\0\1\u018d\1\0\3\44\1\0\1\u018e\2\0"+
                  "\1\u018e\15\0\1\u018f\4\0\1\u018f\4\0\5\u018f\1\0"+
                  "\1\u0190\3\0\27\u018f\27\0\1\u0191\7\0\1\u0192\52\0"+
                  "\1\u0193\2\0\1\u0193\15\0\1\u0194\4\0\1\u0194\4\0"+
                  "\5\u0194\1\0\1\u0195\3\0\27\u0194\20\0\1\u0196\100\0"+
                  "\1\363\6\0\1\u0135\4\0\3\363\3\0\1\365\3\0"+
                  "\3\363\1\u0197\4\0\30\363\1\0\1\363\1\0\1\363"+
                  "\6\0\1\44\1\0\1\44\1\0\1\44\4\0\12\44"+
                  "\2\0\1\u0198\1\0\6\44\1\331\2\44\1\0\27\44"+
                  "\3\0\3\44\14\0\1\u0199\73\0\1\44\1\0\1\44"+
                  "\1\u019a\1\44\1\0\1\u019b\2\0\2\u019c\1\44\1\u019c"+
                  "\1\u019d\1\44\3\u019c\1\u019d\4\0\5\u019d\1\44\1\u019e"+
                  "\2\44\1\0\27\u019d\3\0\3\44\43\0\1\u019f\43\0"+
                  "\1\u01a0\1\44\1\0\1\44\1\0\1\44\4\0\12\44"+
                  "\4\0\6\44\1\331\2\44\1\0\27\44\3\0\3\44"+
                  "\5\0\1\44\1\0\1\44\1\0\1\44\4\0\12\44"+
                  "\4\0\6\44\1\u01a1\2\44\1\0\27\44\3\0\3\44"+
                  "\2\0\1\371\2\0\1\44\1\0\1\44\1\0\1\44"+
                  "\4\0\12\44\4\0\6\44\1\u01a1\2\44\1\0\27\44"+
                  "\3\0\3\44\5\0\1\44\1\0\1\44\1\363\1\44"+
                  "\4\0\1\44\1\364\4\44\3\63\1\44\2\0\1\365"+
                  "\1\0\2\44\3\63\1\366\1\331\2\44\1\0\22\63"+
                  "\1\u01a2\4\63\1\363\1\0\1\363\1\44\1\63\1\44"+
                  "\5\0\1\44\1\0\1\44\1\363\1\44\4\0\1\44"+
                  "\1\364\4\44\3\63\1\44\2\0\1\365\1\0\2\44"+
                  "\3\63\1\366\1\331\2\44\1\0\15\63\1\u01a3\11\63"+
                  "\1\363\1\0\1\363\1\44\1\63\1\44\5\0\1\44"+
                  "\1\0\1\44\1\363\1\44\4\0\1\44\1\364\4\44"+
                  "\3\63\1\44\2\0\1\365\1\0\2\44\3\63\1\366"+
                  "\1\331\2\44\1\0\10\63\1\u01a4\11\63\1\u01a5\4\63"+
                  "\1\363\1\0\1\363\1\44\1\63\1\44\5\0\1\44"+
                  "\1\0\1\44\1\363\1\44\4\0\1\44\1\364\4\44"+
                  "\3\63\1\44\2\0\1\365\1\0\2\44\3\63\1\366"+
                  "\1\331\2\44\1\0\3\63\1\u01a6\23\63\1\363\1\0"+
                  "\1\363\1\44\1\63\1\44\5\0\1\44\1\0\1\44"+
                  "\1\363\1\44\4\0\1\44\1\364\4\44\3\63\1\44"+
                  "\2\0\1\365\1\0\2\44\3\63\1\366\1\331\2\44"+
                  "\1\0\21\63\1\u01a7\5\63\1\363\1\0\1\363\1\44"+
                  "\1\63\1\44\5\0\1\44\1\0\1\44\1\363\1\44"+
                  "\4\0\1\44\1\364\4\44\3\63\1\44\2\0\1\365"+
                  "\1\0\2\44\3\63\1\366\1\331\2\44\1\0\15\63"+
                  "\1\u01a8\11\63\1\363\1\0\1\363\1\44\1\63\1\44"+
                  "\5\0\1\44\1\0\1\44\1\363\1\44\4\0\1\44"+
                  "\1\364\4\44\3\63\1\44\2\0\1\365\1\0\2\44"+
                  "\3\63\1\366\1\331\2\44\1\0\23\63\1\u01a9\3\63"+
                  "\1\363\1\0\1\363\1\44\1\63\1\44\5\0\1\44"+
                  "\1\0\1\44\1\363\1\44\4\0\1\44\1\364\4\44"+
                  "\3\63\1\44\2\0\1\365\1\0\2\44\3\63\1\366"+
                  "\1\331\2\44\1\0\13\63\1\u01aa\13\63\1\363\1\0"+
                  "\1\363\1\44\1\63\1\44\5\0\1\44\1\0\1\44"+
                  "\1\363\1\44\4\0\1\44\1\364\4\44\3\63\1\44"+
                  "\2\0\1\365\1\0\2\44\3\63\1\366\1\331\2\44"+
                  "\1\0\4\63\1\u01ab\22\63\1\363\1\0\1\363\1\44"+
                  "\1\63\1\44\5\0\1\44\1\0\1\44\1\363\1\44"+
                  "\4\0\1\44\1\364\4\44\3\63\1\44\2\0\1\365"+
                  "\1\0\2\44\3\63\1\366\1\331\2\44\1\0\14\63"+
                  "\1\u01ac\12\63\1\363\1\0\1\363\1\44\1\63\1\44"+
                  "\5\0\1\44\1\0\1\44\1\363\1\44\4\0\1\44"+
                  "\1\364\4\44\3\63\1\44\2\0\1\365\1\0\2\44"+
                  "\3\63\1\366\1\331\2\44\1\0\1\u01ad\26\63\1\363"+
                  "\1\0\1\363\1\44\1\63\1\44\5\0\1\44\1\0"+
                  "\1\44\1\363\1\44\4\0\1\44\1\364\4\44\3\63"+
                  "\1\44\2\0\1\365\1\0\2\44\3\63\1\366\1\331"+
                  "\2\44\1\0\23\63\1\u01ae\3\63\1\363\1\0\1\363"+
                  "\1\44\1\63\1\44\5\0\1\44\1\0\1\44\1\363"+
                  "\1\44\4\0\1\44\1\364\4\44\3\63\1\44\2\0"+
                  "\1\365\1\0\2\44\3\63\1\366\1\331\2\44\1\0"+
                  "\10\63\1\u01af\16\63\1\363\1\0\1\363\1\44\1\63"+
                  "\1\44\5\0\1\44\1\0\1\44\1\0\1\44\4\0"+
                  "\12\44\4\0\6\44\1\331\2\44\1\0\5\44\1\u010e"+
                  "\12\44\1\u010e\6\44\3\0\3\44\5\0\1\44\1\0"+
                  "\1\44\1\0\1\44\4\0\12\44\4\0\6\44\1\331"+
                  "\2\44\1\0\4\44\1\u010e\16\44\1\u010e\3\44\3\0"+
                  "\3\44\5\0\1\44\1\0\1\44\1\0\1\44\4\0"+
                  "\12\44\4\0\6\44\1\331\2\44\1\0\23\44\1\u010e"+
                  "\3\44\3\0\3\44\5\0\1\44\1\0\1\44\1\0"+
                  "\1\44\4\0\12\44\4\0\6\44\1\331\2\44\1\0"+
                  "\20\44\1\u010e\6\44\3\0\3\44\21\0\1\u0191\63\0"+
                  "\1\44\2\0\1\44\1\0\1\44\1\0\1\44\4\0"+
                  "\12\44\4\0\6\44\1\331\2\44\1\0\27\44\3\0"+
                  "\3\44\43\0\1\u01b0\46\0\2\u01b1\5\0\1\u01b1\5\0"+
                  "\3\u01b1\7\0\4\u01b1\1\0\1\u01b1\2\0\30\u01b1\1\0"+
                  "\1\u01b2\1\0\1\u01b1\1\0\13\347\1\u01b3\67\347\1\0"+
                  "\1\u01b4\2\0\1\u01b4\14\0\1\u01b5\2\0\1\u01b6\2\u01b7"+
                  "\100\0\2\u012d\101\0\3\u01b8\7\0\1\u01b8\7\0\6\u01b8"+
                  "\50\0\1\u0191\10\0\1\u01b9\102\0\1\u01ba\102\0\1\u0198"+
                  "\60\0\1\u019a\2\0\1\u019b\2\0\2\u01bb\1\0\1\u01bb"+
                  "\1\u01bc\1\0\3\u01bb\1\u01bc\4\0\5\u01bc\1\0\1\u01bd"+
                  "\3\0\27\u01bc\10\0\1\141\2\0\1\141\1\0\1\141"+
                  "\12\0\1\141\1\0\4\141\4\0\5\141\1\0\1\u012b"+
                  "\3\0\27\141\40\0\1\u013d\64\0\1\u01be\100\0\1\u01bf"+
                  "\75\0\1\44\1\0\1\44\1\363\1\44\4\0\1\44"+
                  "\1\364\4\44\3\63\1\44\2\0\1\365\1\0\2\44"+
                  "\3\63\1\366\1\331\2\44\1\0\1\u01c0\26\63\1\363"+
                  "\1\0\1\363\1\44\1\63\1\44\2\174\1\u01c1\1\u01c2"+
                  "\1\174\1\175\10\174\2\175\14\174\2\175\4\174\1\u0142"+
                  "\40\174\15\u01c3\1\0\65\u01c3\1\174\4\u01c4\1\175\1\u01c4"+
                  "\1\174\1\u01c4\2\174\3\u01c4\2\175\10\174\1\u01c4\3\174"+
                  "\2\175\3\174\1\u01c5\1\u0142\2\174\1\u01c4\30\174\1\u01c4"+
                  "\4\174\2\u0145\1\u0184\1\u0185\77\u0145\1\174\4\0\1\175"+
                  "\1\0\1\174\1\0\2\174\3\0\2\175\1\174\1\u01c6"+
                  "\6\174\1\0\3\174\2\175\4\174\1\u0142\2\174\1\0"+
                  "\30\174\1\0\4\174\1\u01c7\4\u01c3\1\u01c8\3\u01c3\2\u01c7"+
                  "\2\u01c3\1\0\2\u01c8\14\u01c7\2\u01c8\4\u01c7\1\u01c9\33\u01c7"+
                  "\1\u01c3\4\u01c7\42\0\1\u01ca\40\0\1\174\1\0\1\u0149"+
                  "\2\0\1\175\1\0\1\174\1\0\2\174\3\0\2\175"+
                  "\10\174\1\0\3\174\2\175\4\174\1\u01cb\2\174\1\0"+
                  "\30\174\1\0\5\174\4\0\1\175\1\0\1\174\1\0"+
                  "\2\174\3\0\2\175\10\174\1\0\3\174\2\175\4\174"+
                  "\1\u0142\2\174\1\0\1\u01cc\27\174\1\0\4\174\13\0"+
                  "\1\u01cd\71\0\1\222\2\0\1\222\1\0\4\222\3\0"+
                  "\13\222\3\0\5\222\1\0\1\u014f\1\0\1\222\1\0"+
                  "\27\222\3\0\2\222\14\0\1\u01ce\71\0\1\u0149\37\0"+
                  "\1\u01ca\40\0\15\u01cf\1\0\65\u01cf\41\u01d0\1\u01d1\41\u01d0"+
                  "\10\0\1\u0156\13\0\3\u0156\7\0\3\u0156\1\u01d2\4\0"+
                  "\30\u0156\1\0\1\u0156\1\0\1\u0156\3\0\1\250\21\0"+
                  "\3\250\7\0\3\250\1\0\1\u0159\3\0\27\250\44\0"+
                  "\3\u01d3\5\0\27\u01d3\4\0\1\u01d3\3\0\1\272\1\u01d4"+
                  "\77\0\1\u0165\4\u0166\1\u0165\1\u01d5\3\u0165\1\u0166\15\u0165"+
                  "\1\u0166\45\u0165\1\u0166\4\u0165\6\u0166\1\u01d6\74\u0166\1\u0167"+
                  "\4\u0168\5\u0167\1\u0168\1\u01d7\14\u0167\1\u0168\45\u0167\1\u0168"+
                  "\4\u0167\13\u0168\1\u01d8\67\u0168\2\0\1\35\37\0\1\326"+
                  "\50\0\1\u016b\13\0\3\u016b\7\0\3\u016b\5\0\30\u016b"+
                  "\1\0\1\u016b\1\0\1\u016b\10\0\2\u01d9\5\0\1\u01d9"+
                  "\5\0\3\u01d9\7\0\4\u01d9\1\0\1\u01d9\2\0\30\u01d9"+
                  "\1\0\1\u016a\1\0\1\u01d9\14\0\1\u01da\77\0\1\u0170"+
                  "\13\0\3\u0170\7\0\3\u0170\5\0\30\u0170\1\0\1\u0170"+
                  "\1\0\1\u0170\10\0\2\u01db\5\0\1\u01db\5\0\3\u01db"+
                  "\7\0\4\u01db\1\0\1\u01db\2\0\30\u01db\1\0\1\u016f"+
                  "\1\0\1\u01db\1\0\13\347\1\u01dc\67\347\2\0\1\310"+
                  "\2\0\1\310\1\0\1\310\1\0\1\310\4\0\12\310"+
                  "\4\0\6\310\1\u0172\2\310\1\0\27\310\3\0\3\310"+
                  "\42\0\1\u01dd\43\0\1\u0175\36\0\1\u01dd\40\0\2\u0175"+
                  "\1\u0176\2\u0175\1\u01de\1\u0175\1\u01de\1\u017a\11\u0175\1\u017a"+
                  "\1\u0175\3\u01de\1\u017a\4\u0175\5\u017a\1\u0175\1\u017a\3\u0175"+
                  "\27\u017a\6\u0175\10\0\1\u01dd\13\0\3\u01df\7\0\3\u01e0"+
                  "\1\0\1\u01dd\3\0\27\u01e0\1\u01df\1\0\1\u01df\1\0"+
                  "\1\u01e0\1\0\2\u0175\1\u0176\2\u0175\1\u0177\1\u0175\1\u0177"+
                  "\1\u0179\5\u0175\1\u0179\1\u017a\1\u0175\1\u0179\1\u017a\1\u0175"+
                  "\3\u0179\1\u017a\4\u0175\5\u0179\1\u01e1\1\u017a\3\u0175\27\u0179"+
                  "\1\u017b\1\u0175\1\u017c\1\u0175\1\u0178\3\u0175\1\u0176\2\u0175"+
                  "\1\u0177\1\u0175\1\u0177\1\u0178\5\u0175\1\u0179\1\u017a\1\u0175"+
                  "\1\u0179\1\u017a\1\u0175\3\u0179\1\u017a\4\u0175\5\u0179\1\u01e1"+
                  "\1\u017a\3\u0175\27\u0179\1\u017b\1\u0175\1\u017c\1\u0175\1\u0178"+
                  "\1\u0175\10\0\1\u01df\13\0\3\u01df\7\0\3\u01e0\1\0"+
                  "\1\u01dd\3\0\27\u01e0\1\u01df\1\0\1\u01df\1\0\1\u01e0"+
                  "\10\0\1\u01e2\1\u01e3\5\0\1\u01e2\5\0\3\u01e3\7\0"+
                  "\3\u01e4\1\u01e2\1\u01dd\1\u01e2\2\0\27\u01e4\1\u01e5\1\0"+
                  "\1\u01df\1\0\1\u01e4\14\0\1\323\67\0\15\u017f\1\u01e6"+
                  "\65\u017f\43\0\1\u01e7\44\0\1\44\1\0\1\44\1\0"+
                  "\1\44\4\0\12\44\4\0\6\44\1\331\1\u01e8\1\44"+
                  "\1\0\27\44\3\0\3\44\5\u0180\1\u0181\1\u0180\1\u0181"+
                  "\1\u0180\1\u0181\4\u0180\12\u0181\4\u0180\6\u0181\1\u0183\1\u01e8"+
                  "\1\u0181\1\u0180\27\u0181\3\u0180\3\u0181\3\44\1\u0118\37\44"+
                  "\1\u01e8\37\44\2\0\1\u0184\100\0\2\333\1\u01e9\1\u01ea"+
                  "\77\333\13\337\1\u01eb\26\337\1\u0187\40\337\75\0\1\342"+
                  "\12\0\1\44\1\0\1\44\1\0\1\44\2\0\1\u01ec"+
                  "\1\0\12\44\4\0\6\44\1\331\2\44\1\0\27\44"+
                  "\3\0\3\44\42\0\1\u01ed\45\0\1\u018f\1\0\1\u018f"+
                  "\12\0\1\u018f\1\0\4\u018f\4\0\5\u018f\1\0\1\u0190"+
                  "\3\0\27\u018f\6\0\3\u018f\1\u01ee\77\u018f\42\0\1\u01ef"+
                  "\45\0\1\u0194\1\0\1\u0194\12\0\1\u0194\1\0\4\u0194"+
                  "\4\0\5\u0194\1\0\1\u0195\3\0\27\u0194\6\0\3\u0194"+
                  "\1\u01f0\77\u0194\1\0\1\u01f1\2\0\1\u01f1\1\u01f2\111\0"+
                  "\1\u01f3\73\0\1\u01bb\1\0\2\u01bb\5\0\1\u01bb\2\0"+
                  "\1\u01bb\2\0\3\u01bb\5\0\2\u01bb\3\u01f4\5\0\27\u01f4"+
                  "\1\u01f5\3\0\1\u01f4\11\0\1\u01f6\77\0\1\44\1\0"+
                  "\1\44\1\u019a\1\44\1\0\1\u019b\2\0\2\u019c\1\44"+
                  "\1\u019c\1\u019d\1\44\3\u019c\1\u019d\4\0\5\u019d\1\44"+
                  "\1\u019e\1\u01f7\1\44\1\0\27\u019d\3\0\3\44\5\0"+
                  "\1\u019d\1\0\1\u019d\1\u019a\1\44\1\0\1\u019b\2\0"+
                  "\2\u019c\1\44\1\u019c\1\u019d\1\44\4\u019d\4\0\5\u019d"+
                  "\1\44\1\u019e\1\u01f7\1\44\1\0\27\u019d\3\0\3\44"+
                  "\3\u019d\1\u01f8\77\u019d\5\0\1\44\1\0\1\44\1\363"+
                  "\1\44\4\0\1\44\1\364\4\44\3\63\1\44\2\0"+
                  "\1\365\1\0\2\44\3\63\1\366\1\331\2\44\1\0"+
                  "\4\63\1\u01f9\22\63\1\363\1\0\1\363\1\44\1\63"+
                  "\1\44\5\0\1\44\1\0\1\44\1\363\1\44\4\0"+
                  "\1\44\1\364\4\44\3\63\1\44\2\0\1\365\1\0"+
                  "\2\44\3\63\1\366\1\331\2\44\1\0\4\63\1\u01fa"+
                  "\22\63\1\363\1\0\1\363\1\44\1\63\1\44\5\0"+
                  "\1\44\1\0\1\44\1\363\1\44\4\0\1\44\1\364"+
                  "\4\44\3\63\1\44\2\0\1\365\1\0\2\44\3\63"+
                  "\1\366\1\331\2\44\1\0\5\63\1\u01fb\21\63\1\363"+
                  "\1\0\1\363\1\44\1\63\1\44\5\0\1\44\1\0"+
                  "\1\44\1\363\1\44\4\0\1\44\1\364\4\44\3\63"+
                  "\1\44\2\0\1\365\1\0\2\44\3\63\1\366\1\331"+
                  "\2\44\1\0\4\63\1\u01fc\22\63\1\363\1\0\1\363"+
                  "\1\44\1\63\1\44\5\0\1\44\1\0\1\44\1\363"+
                  "\1\44\4\0\1\44\1\364\4\44\3\63\1\44\2\0"+
                  "\1\365\1\0\2\44\3\63\1\366\1\331\2\44\1\0"+
                  "\10\63\1\u01fd\16\63\1\363\1\0\1\363\1\44\1\63"+
                  "\1\44\5\0\1\44\1\0\1\44\1\363\1\44\4\0"+
                  "\1\44\1\364\4\44\3\63\1\44\2\0\1\365\1\0"+
                  "\2\44\3\63\1\366\1\331\2\44\1\0\2\63\1\u01fe"+
                  "\24\63\1\363\1\0\1\363\1\44\1\63\1\44\5\0"+
                  "\1\44\1\0\1\44\1\363\1\44\4\0\1\44\1\364"+
                  "\4\44\3\63\1\44\2\0\1\365\1\0\2\44\3\63"+
                  "\1\366\1\331\2\44\1\0\4\63\1\u01ff\22\63\1\363"+
                  "\1\0\1\363\1\44\1\63\1\44\5\0\1\44\1\0"+
                  "\1\44\1\363\1\44\4\0\1\44\1\364\4\44\3\63"+
                  "\1\44\2\0\1\365\1\0\2\44\3\63\1\366\1\331"+
                  "\2\44\1\0\15\63\1\u0200\11\63\1\363\1\0\1\363"+
                  "\1\44\1\63\1\44\5\0\1\44\1\0\1\44\1\363"+
                  "\1\44\4\0\1\44\1\364\4\44\3\63\1\44\2\0"+
                  "\1\365\1\0\2\44\3\63\1\366\1\331\2\44\1\0"+
                  "\4\63\1\u0201\22\63\1\363\1\0\1\363\1\44\1\63"+
                  "\1\44\5\0\1\44\1\0\1\44\1\363\1\44\4\0"+
                  "\1\44\1\364\4\44\3\63\1\44\2\0\1\365\1\0"+
                  "\2\44\3\63\1\366\1\331\2\44\1\0\17\63\1\u0202"+
                  "\7\63\1\363\1\0\1\363\1\44\1\63\1\44\5\0"+
                  "\1\44\1\0\1\44\1\363\1\44\4\0\1\44\1\364"+
                  "\4\44\3\63\1\44\2\0\1\365\1\0\2\44\3\63"+
                  "\1\366\1\331\2\44\1\0\10\63\1\u0203\16\63\1\363"+
                  "\1\0\1\363\1\44\1\63\1\44\5\0\1\44\1\0"+
                  "\1\44\1\363\1\44\4\0\1\44\1\364\4\44\3\63"+
                  "\1\44\2\0\1\365\1\0\2\44\3\63\1\366\1\331"+
                  "\2\44\1\0\13\63\1\u0204\13\63\1\363\1\0\1\363"+
                  "\1\44\1\63\1\44\75\0\1\u011f\31\0\2\u0205\46\0"+
                  "\1\u0206\32\0\3\u01b7\64\0\1\u019a\2\0\1\u019b\2\0"+
                  "\2\u01bb\1\0\1\u01bb\1\u01bc\1\0\3\u01bb\1\u01bc\4\0"+
                  "\5\u01bc\1\0\1\u01bd\1\u0207\2\0\27\u01bc\13\0\1\u01bc"+
                  "\1\0\1\u01bc\1\u019a\2\0\1\u019b\2\0\2\u01bb\1\0"+
                  "\1\u01bb\1\u01bc\1\0\4\u01bc\4\0\5\u01bc\1\0\1\u01bd"+
                  "\1\u0207\2\0\27\u01bc\6\0\3\u01bc\1\u0208\77\u01bc\5\0"+
                  "\1\44\1\0\1\44\1\363\1\44\4\0\1\44\1\364"+
                  "\4\44\3\63\1\44\2\0\1\365\1\0\2\44\3\63"+
                  "\1\366\1\331\2\44\1\0\2\63\1\u0209\24\63\1\363"+
                  "\1\0\1\363\1\44\1\63\1\44\1\174\4\0\1\175"+
                  "\1\0\1\174\1\0\2\174\3\0\2\175\10\174\1\0"+
                  "\3\174\2\175\4\174\1\u020a\2\174\1\0\30\174\1\0"+
                  "\5\174\1\0\1\u01c1\2\0\1\175\1\0\1\174\1\0"+
                  "\2\174\3\0\2\175\10\174\1\0\3\174\2\175\4\174"+
                  "\1\u0142\2\174\1\0\30\174\1\0\4\174\15\u01c3\1\174"+
                  "\65\u01c3\43\0\1\u020b\37\0\1\174\4\u01c4\1\175\1\u01c4"+
                  "\1\174\1\u01c4\2\174\3\u01c4\2\175\10\174\1\u01c4\3\174"+
                  "\2\175\4\174\1\u0142\2\174\1\u01c4\30\174\1\u01c4\4\174"+
                  "\1\u01c7\4\u01c3\1\u01c8\1\u01c3\1\u01c7\1\u01c3\2\u01c7\2\u01c3"+
                  "\1\174\2\u01c8\10\u01c7\1\u01c3\3\u01c7\2\u01c8\4\u01c7\1\u020c"+
                  "\2\u01c7\1\u01c3\30\u01c7\1\u01c3\5\u01c7\4\u01c3\1\u01c8\1\u01c3"+
                  "\1\u01c7\1\u01c3\2\u01c7\1\u01c3\1\u020d\1\174\2\u01c8\10\u01c7"+
                  "\1\u01c3\3\u01c7\2\u01c8\3\u01c7\1\u020e\1\u020c\2\u01c7\1\u01c3"+
                  "\30\u01c7\1\u01c3\6\u01c7\1\u01c3\2\u01c7\1\u01c8\7\u01c7\1\u020f"+
                  "\2\u01c8\14\u01c7\2\u01c8\4\u01c7\1\u020c\40\u01c7\2\0\1\u0149"+
                  "\1\u0210\77\0\2\174\1\u0211\1\u0212\1\174\1\175\10\174"+
                  "\2\175\14\174\2\175\4\174\1\u0142\41\174\4\0\1\175"+
                  "\1\0\1\174\1\0\2\174\3\0\2\175\10\174\1\0"+
                  "\3\174\2\175\4\174\1\u0142\2\174\1\0\2\174\1\u0213"+
                  "\25\174\1\0\4\174\15\u01cf\1\u0214\65\u01cf\43\0\1\u0215"+
                  "\37\0\43\u01d0\1\u0215\37\u01d0\16\0\1\u0216\74\0\1\u01d3"+
                  "\13\0\3\u01d3\7\0\3\u01d3\1\u0217\4\0\30\u01d3\1\0"+
                  "\1\u01d3\1\0\1\u01d3\2\0\2\272\1\0\1\272\35\0"+
                  "\1\u0164\40\0\1\271\4\0\1\271\1\275\1\271\1\u0218"+
                  "\1\271\1\0\15\271\1\0\45\271\1\0\4\271\6\0"+
                  "\1\u0219\1\0\1\u021a\72\0\1\271\4\0\3\271\1\u021b"+
                  "\1\271\1\0\1\277\14\271\1\0\45\271\1\0\4\271"+
                  "\10\0\1\u021c\2\0\1\u021d\164\0\1\u016c\102\0\1\u0171"+
                  "\5\0\2\u0175\1\u0176\2\u0175\1\u0177\1\u0175\1\u0177\1\u0178"+
                  "\5\u0175\1\u0179\1\u017a\1\u0175\1\u0179\1\u017a\1\u0175\3\u0179"+
                  "\1\u017a\4\u0175\5\u0179\1\u01e1\4\u0175\27\u0179\1\u017b\1\u0175"+
                  "\1\u017c\1\u0175\1\u0178\3\u0175\1\u0176\2\u0175\1\u01de\1\u0175"+
                  "\1\u01de\12\u0175\1\u017a\1\u0175\3\u01de\1\u017a\4\u0175\5\u017a"+
                  "\1\u0175\1\u017a\3\u0175\27\u017a\6\u0175\10\0\1\u01df\13\0"+
                  "\3\u01df\7\0\3\u01e0\5\0\27\u01e0\1\u01df\1\0\1\u01df"+
                  "\1\0\1\u01e0\11\0\1\u01dd\13\0\3\u01df\7\0\3\u01e0"+
                  "\5\0\27\u01e0\1\u01df\1\0\1\u01df\1\0\1\u01e0\10\0"+
                  "\2\u01e2\5\0\1\u01e2\5\0\3\u01e2\7\0\4\u01e2\1\0"+
                  "\1\u01e2\2\0\27\u01e2\1\u021e\3\0\1\u01e2\10\0\1\u01e2"+
                  "\1\u01e3\5\0\1\u01e2\5\0\3\u01e3\7\0\3\u01e4\1\u01e2"+
                  "\1\0\1\u01e2\2\0\27\u01e4\1\u01e5\1\0\1\u01df\1\0"+
                  "\1\u01e4\10\0\1\u01e2\1\u021f\5\0\1\u01e2\5\0\3\u01e3"+
                  "\7\0\3\u01e4\1\u01e2\1\0\1\u01e2\2\0\27\u01e4\1\u01e5"+
                  "\1\0\1\u01df\1\0\1\u01e4\10\0\1\u01e2\1\u021f\2\0"+
                  "\1\u0220\2\0\1\u01e2\5\0\3\u01e3\7\0\3\u01e4\1\u01e2"+
                  "\1\0\1\u01e2\2\0\27\u01e4\1\u01e5\1\0\1\u01df\1\0"+
                  "\1\u01e4\6\0\1\u0221\10\0\1\u0222\1\u0221\14\0\1\u0222"+
                  "\1\u0221\110\0\1\u0223\44\0\1\44\1\0\1\44\1\0"+
                  "\1\44\4\0\12\44\4\0\6\44\1\331\1\u0224\1\44"+
                  "\1\0\27\44\3\0\3\44\2\0\1\u01e9\2\0\1\44"+
                  "\1\0\1\44\1\0\1\44\4\0\12\44\4\0\6\44"+
                  "\1\331\2\44\1\0\27\44\3\0\3\44\15\u0225\1\0"+
                  "\65\u0225\2\0\1\u018e\1\u0226\101\0\1\u018f\2\0\1\u018f"+
                  "\1\0\1\u018f\12\0\1\u018f\1\0\4\u018f\4\0\5\u018f"+
                  "\1\0\1\u0190\3\0\27\u018f\10\0\1\u0193\1\u0227\101\0"+
                  "\1\u0194\2\0\1\u0194\1\0\1\u0194\12\0\1\u0194\1\0"+
                  "\4\u0194\4\0\5\u0194\1\0\1\u0195\3\0\27\u0194\50\0"+
                  "\1\u0228\41\0\1\u0229\2\0\1\u0229\106\0\1\u022a\2\0"+
                  "\1\u019b\2\0\2\u01bb\1\0\1\u01bb\1\u01bc\1\0\3\u01f4"+
                  "\1\u01bc\4\0\2\u01bc\3\u022b\1\0\1\u01bd\1\u0207\2\0"+
                  "\27\u022b\1\u01f4\1\0\1\u01f4\1\0\1\u01f4\10\0\2\u01f5"+
                  "\5\0\1\u01f5\5\0\3\u01f5\7\0\4\u01f5\1\0\1\u01f5"+
                  "\2\0\30\u01f5\1\0\1\u01bb\1\0\1\u01f5\14\0\1\u022c"+
                  "\71\0\1\u019d\2\0\1\u019d\1\0\1\u019d\1\u019a\1\44"+
                  "\1\0\1\u019b\2\0\2\u019c\1\44\1\u019c\1\u019d\1\44"+
                  "\4\u019d\4\0\5\u019d\1\44\1\u019e\1\u01f7\1\44\1\0"+
                  "\27\u019d\3\0\3\44\5\0\1\44\1\0\1\44\1\363"+
                  "\1\44\4\0\1\44\1\364\4\44\3\63\1\44\2\0"+
                  "\1\365\1\0\2\44\3\63\1\366\1\331\2\44\1\0"+
                  "\5\63\1\u022d\21\63\1\363\1\0\1\363\1\44\1\63"+
                  "\1\44\5\0\1\44\1\0\1\44\1\363\1\44\4\0"+
                  "\1\44\1\364\4\44\3\63\1\44\2\0\1\365\1\0"+
                  "\2\44\3\63\1\366\1\331\2\44\1\0\23\63\1\u022e"+
                  "\3\63\1\363\1\0\1\363\1\44\1\63\1\44\5\0"+
                  "\1\44\1\0\1\44\1\363\1\44\4\0\1\44\1\364"+
                  "\4\44\3\63\1\44\2\0\1\365\1\0\2\44\3\63"+
                  "\1\366\1\331\2\44\1\0\2\63\1\u022f\24\63\1\363"+
                  "\1\0\1\363\1\44\1\63\1\44\5\0\1\44\1\0"+
                  "\1\44\1\363\1\44\4\0\1\44\1\364\4\44\3\63"+
                  "\1\44\2\0\1\365\1\0\2\44\3\63\1\366\1\331"+
                  "\2\44\1\0\13\63\1\u0230\13\63\1\363\1\0\1\363"+
                  "\1\44\1\63\1\44\5\0\1\44\1\0\1\44\1\363"+
                  "\1\44\4\0\1\44\1\364\4\44\3\63\1\44\2\0"+
                  "\1\365\1\0\2\44\3\63\1\366\1\331\2\44\1\0"+
                  "\4\63\1\u0231\22\63\1\363\1\0\1\363\1\44\1\63"+
                  "\1\44\24\0\2\u0205\101\0\3\u0232\7\0\1\u0232\7\0"+
                  "\6\u0232\31\0\1\u01bc\2\0\1\u01bc\1\0\1\u01bc\1\u019a"+
                  "\2\0\1\u019b\2\0\2\u01bb\1\0\1\u01bb\1\u01bc\1\0"+
                  "\4\u01bc\4\0\5\u01bc\1\0\1\u01bd\1\u0207\2\0\27\u01bc"+
                  "\6\0\2\174\1\0\2\174\1\175\10\174\2\175\14\174"+
                  "\2\175\4\174\1\u0142\40\174\43\0\1\174\37\0\2\u01c7"+
                  "\1\u0233\1\u0234\1\u01c7\1\u01c8\7\u01c7\1\u020f\2\u01c8\14\u01c7"+
                  "\2\u01c8\4\u01c7\1\u020c\40\u01c7\15\u0235\1\174\65\u0235\1\u01c7"+
                  "\4\u0236\1\u01c8\1\u0236\1\u01c7\1\u0236\2\u01c7\2\u0236\1\u0237"+
                  "\2\u01c8\10\u01c7\1\u0236\3\u01c7\2\u01c8\3\u01c7\1\u0238\1\u020c"+
                  "\2\u01c7\1\u0236\30\u01c7\1\u0236\4\u01c7\1\u020f\4\0\1\u0239"+
                  "\1\0\1\u020f\1\0\2\u020f\2\0\1\u018d\2\u0239\10\u020f"+
                  "\1\0\3\u020f\2\u0239\4\u020f\1\u023a\2\u020f\1\0\30\u020f"+
                  "\1\0\4\u020f\1\174\4\0\1\175\1\0\1\174\1\0"+
                  "\2\174\3\0\2\175\10\174\1\0\3\174\2\175\4\174"+
                  "\1\u023b\2\174\1\0\30\174\1\0\5\174\1\0\1\u0211"+
                  "\2\0\1\175\1\0\1\174\1\0\2\174\3\0\2\175"+
                  "\10\174\1\0\3\174\2\175\4\174\1\u01cb\2\174\1\0"+
                  "\30\174\1\0\4\174\5\0\1\u023c\10\0\2\u023c\14\0"+
                  "\2\u023c\110\0\1\u023d\102\0\1\u023e\55\0\1\u023f\64\0"+
                  "\1\271\4\0\1\271\1\275\3\271\1\0\15\271\1\0"+
                  "\45\271\1\0\4\271\6\u0166\1\0\74\u0166\6\0\1\u0219"+
                  "\74\0\1\271\4\0\5\271\1\0\1\277\14\271\1\0"+
                  "\45\271\1\0\4\271\13\0\1\u021d\67\0\13\u0168\1\0"+
                  "\67\u0168\7\0\1\u01e2\1\u021f\2\0\1\u0220\2\0\1\u01e2"+
                  "\5\0\3\u01e2\7\0\4\u01e2\1\0\1\u01e2\2\0\27\u01e2"+
                  "\1\u021e\3\0\1\u01e2\1\0\2\u0175\1\u0176\2\u0175\1\u0177"+
                  "\1\u0175\1\u0240\1\u0241\5\u0175\1\u0242\1\u017a\1\u0175\1\u0179"+
                  "\1\u017a\1\u0175\3\u0242\1\u017a\4\u0175\2\u0179\3\u0242\1\u0243"+
                  "\1\u0175\1\u0244\2\u0175\27\u0242\1\u0245\1\u0175\1\u017c\1\u0175"+
                  "\1\u0241\1\u0175\10\0\1\u0246\106\0\1\327\24\0\1\u0247"+
                  "\46\0\1\u0221\6\0\1\327\1\0\1\u0222\1\u0221\14\0"+
                  "\1\u0222\1\u0221\3\0\1\u0247\46\0\1\u0221\10\0\1\u0222"+
                  "\1\u0221\14\0\1\u0222\1\u0221\5\0\1\u0223\44\0\1\40"+
                  "\1\0\1\44\1\0\1\44\4\0\1\51\1\40\10\44"+
                  "\4\0\1\51\1\40\4\44\1\331\1\u0224\1\44\1\0"+
                  "\27\44\3\0\3\44\15\u0225\1\u0248\65\u0225\2\0\1\u018e"+
                  "\37\0\1\u01ed\42\0\1\u0193\37\0\1\u01ef\42\0\1\u01f1"+
                  "\1\u0249\141\0\1\u024a\45\0\1\u01bb\1\0\1\u01bb\1\u022a"+
                  "\2\0\1\u019b\2\0\2\u01bb\1\0\1\u01bb\1\u01bc\1\0"+
                  "\3\u01f4\1\u01bc\4\0\2\u01bc\3\u022b\1\0\1\u01bd\1\u0207"+
                  "\2\0\27\u022b\1\u024b\1\0\1\u01f4\1\0\1\u01f4\6\0"+
                  "\1\u01bc\1\0\1\u01bc\1\u022a\2\0\1\u019b\2\0\2\u01bb"+
                  "\1\0\1\u01bb\1\u01bc\1\0\3\u022b\1\u01bc\4\0\2\u01bc"+
                  "\3\u022b\1\0\1\u01bd\1\u0207\2\0\27\u022b\1\u01f4\1\0"+
                  "\1\u01f4\1\0\1\u01f4\76\0\1\u01f5\12\0\1\44\1\0"+
                  "\1\44\1\363\1\44\4\0\1\44\1\364\4\44\3\63"+
                  "\1\44\2\0\1\365\1\0\2\44\3\63\1\366\1\331"+
                  "\2\44\1\0\10\63\1\u024c\16\63\1\363\1\0\1\363"+
                  "\1\44\1\63\1\44\5\0\1\44\1\0\1\44\1\363"+
                  "\1\44\4\0\1\44\1\364\4\44\3\63\1\44\2\0"+
                  "\1\365\1\0\2\44\3\63\1\366\1\331\2\44\1\0"+
                  "\23\63\1\u024d\3\63\1\363\1\0\1\363\1\44\1\63"+
                  "\1\44\1\u01c7\4\u01c3\1\u01c8\1\u01c3\1\u01c7\1\u01c3\2\u01c7"+
                  "\2\u01c3\1\174\2\u01c8\10\u01c7\1\u01c3\3\u01c7\2\u01c8\4\u01c7"+
                  "\1\u01c9\2\u01c7\1\u01c3\30\u01c7\1\u01c3\5\u01c7\1\u01c3\1\u0233"+
                  "\2\u01c3\1\u01c8\1\u01c3\1\u01c7\1\u01c3\2\u01c7\2\u01c3\1\174"+
                  "\2\u01c8\10\u01c7\1\u01c3\3\u01c7\2\u01c8\4\u01c7\1\u020c\2\u01c7"+
                  "\1\u01c3\30\u01c7\1\u01c3\4\u01c7\15\u0235\1\u020f\65\u0235\15\u01c3"+
                  "\1\174\25\u01c3\1\u024e\37\u01c3\1\174\4\0\1\175\1\0"+
                  "\1\174\1\0\2\174\3\0\2\175\10\174\1\0\3\174"+
                  "\2\175\4\174\1\u0142\1\u024f\1\174\1\0\30\174\1\0"+
                  "\4\174\1\u01c7\4\u0236\1\u01c8\1\u0236\1\u01c7\1\u0236\2\u01c7"+
                  "\2\u0236\1\u0237\2\u01c8\10\u01c7\1\u0236\3\u01c7\2\u01c8\4\u01c7"+
                  "\1\u020c\2\u01c7\1\u0236\30\u01c7\1\u0236\4\u01c7\1\u020f\4\0"+
                  "\1\u0239\1\0\1\u020f\1\0\2\u020f\1\0\1\u0250\1\u018d"+
                  "\2\u0239\10\u020f\1\0\3\u020f\2\u0239\3\u020f\1\u0251\1\u023a"+
                  "\2\u020f\1\0\30\u020f\1\0\6\u020f\1\u0252\1\u0253\1\u020f"+
                  "\1\u0239\10\u020f\2\u0239\14\u020f\2\u0239\4\u020f\1\u023a\40\u020f"+
                  "\5\0\1\u023c\10\0\2\u023c\14\0\2\u023c\5\0\1\u023d"+
                  "\102\0\1\u0254\37\0\2\u0175\1\u0176\2\u0175\1\u01de\1\u0175"+
                  "\1\u0255\1\u0256\5\u0175\1\u0244\3\u0175\1\u017a\1\u0175\3\u0255"+
                  "\1\u017a\4\u0175\2\u017a\3\u0256\1\u0244\1\u017a\1\u0244\2\u0175"+
                  "\27\u0256\1\u0257\3\u0175\1\u0244\1\u0175\7\0\1\u01e2\1\u021f"+
                  "\5\0\1\u01e2\5\0\3\u01e3\7\0\3\u01e4\1\u01e2\1\u01dd"+
                  "\1\u01e2\2\0\27\u01e4\1\u01e5\1\0\1\u01df\1\0\1\u01e4"+
                  "\1\0\2\u0175\1\u0176\2\u0175\1\u0177\1\u0175\1\u0240\1\u0242"+
                  "\5\u0175\1\u0242\1\u017a\1\u0175\1\u0179\1\u017a\1\u0175\3\u0242"+
                  "\1\u017a\4\u0175\2\u0179\3\u0242\1\u0243\1\u017a\1\u0244\2\u0175"+
                  "\27\u0242\1\u0245\1\u0175\1\u017c\1\u0175\1\u0241\1\u0175\7\0"+
                  "\2\u01e2\5\0\1\u01e2\5\0\3\u01e2\7\0\4\u01e2\1\u01dd"+
                  "\1\u01e2\2\0\27\u01e2\1\u021e\3\0\1\u01e2\10\0\1\u01e2"+
                  "\1\u021f\2\0\1\u0220\2\0\1\u01e2\5\0\3\u01e3\7\0"+
                  "\3\u01e4\1\u01e2\1\u01dd\1\u01e2\2\0\27\u01e4\1\u01e5\1\0"+
                  "\1\u01df\1\0\1\u01e4\14\0\1\u01dd\67\0\41\u0180\1\u0258"+
                  "\41\u0180\16\0\1\u0259\2\0\2\u0259\1\0\3\u0259\7\0"+
                  "\4\u0259\1\0\1\u0259\2\0\27\u0259\10\0\1\u01f1\37\0"+
                  "\1\u0228\42\0\1\u0229\1\u025a\106\0\1\u01f5\1\u025b\2\0"+
                  "\1\u019b\2\0\1\u025c\1\u01bb\1\0\1\u01bb\1\u01bc\1\0"+
                  "\3\u024b\1\u01bc\4\0\2\u01bc\3\u025d\1\u01f5\1\u01bd\1\u025e"+
                  "\2\0\27\u025d\1\u024b\1\0\1\u01f4\1\0\1\u024b\6\0"+
                  "\1\44\1\0\1\44\1\363\1\44\4\0\1\44\1\364"+
                  "\4\44\3\63\1\44\2\0\1\365\1\0\2\44\3\63"+
                  "\1\366\1\331\2\44\1\0\16\63\1\u025f\10\63\1\363"+
                  "\1\0\1\363\1\44\1\63\1\44\15\u01c3\1\174\25\u01c3"+
                  "\1\u01c7\37\u01c3\1\174\4\0\1\175\1\0\1\174\1\0"+
                  "\2\174\3\0\2\175\10\174\1\0\3\174\2\175\4\174"+
                  "\1\u0142\1\u020f\1\174\1\0\30\174\1\0\4\174\15\u0235"+
                  "\1\0\65\u0235\1\u020f\4\u0260\1\u0239\1\u0260\1\u020f\1\u0260"+
                  "\2\u020f\2\u0260\1\u0261\2\u0239\10\u020f\1\u0260\3\u020f\2\u0239"+
                  "\3\u020f\1\u0262\1\u023a\2\u020f\1\u0260\30\u020f\1\u0260\5\u020f"+
                  "\4\0\1\u0239\1\0\1\u020f\1\0\2\u020f\3\0\2\u0239"+
                  "\10\u020f\1\0\3\u020f\2\u0239\4\u020f\1\u0263\2\u020f\1\0"+
                  "\30\u020f\1\0\5\u020f\1\0\1\u0252\2\0\1\u0239\1\0"+
                  "\1\u020f\1\0\2\u020f\2\0\1\u018d\2\u0239\10\u020f\1\0"+
                  "\3\u020f\2\u0239\4\u020f\1\u023a\2\u020f\1\0\30\u020f\1\0"+
                  "\4\u020f\2\u0175\1\u0176\2\u0175\1\u01de\1\u0175\1\u0255\1\u0244"+
                  "\5\u0175\1\u0244\3\u0175\1\u017a\1\u0175\3\u0255\1\u017a\4\u0175"+
                  "\2\u017a\3\u0256\1\u0244\1\u017a\1\u0244\2\u0175\27\u0256\1\u0257"+
                  "\3\u0175\1\u0244\3\u0175\1\u0176\2\u0175\1\u0177\1\u0175\1\u0240"+
                  "\1\u0241\5\u0175\1\u0242\1\u017a\1\u0175\1\u0179\1\u017a\1\u0175"+
                  "\3\u0242\1\u017a\4\u0175\2\u0179\3\u0242\1\u0243\1\u017a\1\u0244"+
                  "\2\u0175\27\u0242\1\u0245\1\u0175\1\u017c\1\u0175\1\u0241\1\u0175"+
                  "\7\0\1\u01e2\1\u021f\2\0\1\u0220\2\0\1\u01e2\5\0"+
                  "\3\u01e2\7\0\4\u01e2\1\u01dd\1\u01e2\2\0\27\u01e2\1\u021e"+
                  "\3\0\1\u01e2\1\0\43\u0180\1\u01e7\37\u0180\2\0\1\u0229"+
                  "\37\0\1\u024a\45\0\1\u01bb\1\0\1\u025c\1\u025b\2\0"+
                  "\1\u019b\2\0\1\u025c\1\u01bb\1\0\1\u01bb\1\u01bc\1\0"+
                  "\3\u024b\1\u01bc\4\0\2\u01bc\3\u025d\1\u01f5\1\u01bd\1\u025e"+
                  "\2\0\27\u025d\1\u024b\1\0\1\u01f4\1\0\1\u024b\10\0"+
                  "\1\u01f5\1\u0264\2\0\1\u019b\2\0\1\u025c\1\u01bb\1\0"+
                  "\1\u01bb\1\u01bc\1\0\3\u025c\1\u01bc\4\0\2\u01bc\3\u0265"+
                  "\1\u01f5\1\u01bd\1\u025e\2\0\27\u0265\1\u01f5\1\0\1\u01bb"+
                  "\1\0\1\u01f5\6\0\1\u01bc\1\0\1\u0265\1\u025b\2\0"+
                  "\1\u019b\2\0\1\u025c\1\u01bb\1\0\1\u01bb\1\u01bc\1\0"+
                  "\3\u025d\1\u01bc\4\0\2\u01bc\3\u025d\1\u01f5\1\u01bd\1\u025e"+
                  "\2\0\27\u025d\1\u024b\1\0\1\u01f4\1\0\1\u024b\6\0"+
                  "\1\44\1\0\1\44\1\363\1\44\4\0\1\44\1\364"+
                  "\4\44\3\63\1\44\2\0\1\365\1\0\2\44\3\63"+
                  "\1\366\1\331\2\44\1\0\15\63\1\u0266\11\63\1\363"+
                  "\1\0\1\363\1\44\1\63\1\44\43\0\1\u0267\37\0"+
                  "\1\u020f\4\u0260\1\u0239\1\u0260\1\u020f\1\u0260\2\u020f\2\u0260"+
                  "\1\u0261\2\u0239\10\u020f\1\u0260\3\u020f\2\u0239\4\u020f\1\u023a"+
                  "\2\u020f\1\u0260\30\u020f\1\u0260\6\u020f\1\0\2\u020f\1\u0239"+
                  "\10\u020f\2\u0239\14\u020f\2\u0239\4\u020f\1\u023a\40\u020f\5\0"+
                  "\1\u01bb\1\0\2\u025c\5\0\1\u025c\2\0\1\u01bb\2\0"+
                  "\3\u025c\5\0\2\u01bb\3\u024b\1\u01f5\1\0\1\u01f5\2\0"+
                  "\27\u024b\1\u01f5\1\0\1\u01bb\1\0\1\u024b\6\0\1\u01bc"+
                  "\1\0\1\u0265\1\u0264\2\0\1\u019b\2\0\1\u025c\1\u01bb"+
                  "\1\0\1\u01bb\1\u01bc\1\0\3\u0265\1\u01bc\4\0\2\u01bc"+
                  "\3\u0265\1\u01f5\1\u01bd\1\u025e\2\0\27\u0265\1\u01f5\1\0"+
                  "\1\u01bb\1\0\1\u01f5\44\0\1\u020f\37\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[28743];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\33\0\1\11\1\1\1\11\2\1\1\11\6\1\1\11"+
                  "\5\1\1\11\1\1\1\11\5\1\1\11\12\1\1\11"+
                  "\1\1\1\11\2\1\1\11\14\1\1\11\2\1\1\11"+
                  "\4\1\1\11\3\1\1\11\13\1\1\11\1\1\1\11"+
                  "\2\1\1\11\1\1\2\11\14\1\1\11\12\1\2\11"+
                  "\2\1\1\11\1\1\1\11\4\1\1\11\1\1\1\11"+
                  "\1\1\1\11\3\1\1\11\2\1\1\11\3\1\2\11"+
                  "\3\1\1\11\6\1\1\11\1\1\1\11\1\1\1\11"+
                  "\5\1\1\11\12\1\1\11\4\1\1\11\3\1\2\11"+
                  "\1\1\3\0\1\1\2\0\1\1\1\0\4\1\1\11"+
                  "\1\0\1\1\1\11\1\1\2\11\2\1\2\0\1\11"+
                  "\1\1\1\11\1\1\1\0\1\1\1\11\1\0\1\1"+
                  "\1\11\1\0\26\1\4\11\7\1\3\11\1\1\1\0"+
                  "\5\11\1\1\2\11\1\0\6\11\1\1\1\11\1\0"+
                  "\1\11\1\1\1\0\1\1\3\11\1\1\2\0\2\1"+
                  "\2\11\1\0\1\11\2\0\1\11\4\1\1\0\4\1"+
                  "\1\0\3\1\2\11\2\0\1\1\1\0\1\1\2\0"+
                  "\1\11\1\0\2\11\1\0\5\11\1\1\1\11\1\0"+
                  "\1\11\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
                  "\1\11\2\1\1\0\2\11\2\1\2\0\1\1\10\0"+
                  "\1\11\3\0\2\1\1\0\1\11\2\1\2\0\1\11"+
                  "\1\1\1\11\1\1\1\11\2\1\1\0\2\11\2\1"+
                  "\3\0\1\1\1\11\2\0\2\1\1\0\2\11\1\0"+
                  "\16\1\1\11\1\0\1\11\1\1\1\0\1\11\3\1"+
                  "\2\11\3\0\2\11\1\1\1\0\1\1\2\0\2\1"+
                  "\4\0\2\1\7\0\5\1\3\0\1\1\4\0\1\1"+
                  "\4\0\1\1\1\0\4\1\2\0\1\1\1\0\2\1"+
                  "\1\0\1\11\3\0\17\1\1\0\1\11\1\0\2\1"+
                  "\4\0\6\1\3\0\1\1\2\0\1\1\6\0\3\1"+
                  "\1\0\2\1\1\0\1\1\3\0\6\1\4\0\1\1"+
                  "\1\0\3\1\1\0\1\1\1\11\4\0\1\1\5\0"+
                  "\1\1\2\0\2\1\1\0\1\1\1\0\1\1\1\0"+
                  "\1\1\1\11\4\0\2\1\3\0\2\1\1\0\3\1"+
                  "\2\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[615];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
   the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())+1];

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */

  // close a here_string content token if the lexer is currently reading a here string
  void closeHereStringIfAvailable() {
    if (yystate() == X_HERE_STRING) {
      if (isInHereStringContent()) {
        leaveHereStringContent();
      }
      backToPreviousState();
    }
  }

  // return the complete buffer
  protected CharSequence getBuffer() {
    return zzBuffer;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _BashLexerBase(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
          { return BAD_CHARACTER;
          }
          // fall through
          case 196: break;
          case 2:
          { return WHITESPACE;
          }
          // fall through
          case 197: break;
          case 3:
          { if (yystate() == X_HERE_STRING) {
            closeHereStringIfAvailable();
            return LINE_FEED;
          }

            if ((yystate() == S_PARAM_EXPANSION || yystate() == S_SUBSHELL || yystate() == S_ARITH || yystate() == S_ARITH_SQUARE_MODE) && isInState(X_HEREDOC)) {
              backToPreviousState();
              return LINE_FEED;
            }

            if (!heredocState().isEmpty()) {
              // first linebreak after the start marker
              goToState(X_HEREDOC);
              return LINE_FEED;
            }

            return LINE_FEED;
          }
          // fall through
          case 198: break;
          case 4:
          { return WORD;
          }
          // fall through
          case 199: break;
          case 5:
          { stringParsingState().enterString(); if (yystate() == X_HERE_STRING && !isInHereStringContent()) enterHereStringContent();
            goToState(X_STRINGMODE); return STRING_BEGIN;
          }
          // fall through
          case 200: break;
          case 6:
          { return COMMENT;
          }
          // fall through
          case 201: break;
          case 7:
          { return DOLLAR;
          }
          // fall through
          case 202: break;
          case 8:
          { closeHereStringIfAvailable(); return AMP;
          }
          // fall through
          case 203: break;
          case 9:
          { if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState(); stringParsingState().enterSubshell(); goToState(S_SUBSHELL); return LEFT_PAREN;
          }
          // fall through
          case 204: break;
          case 10:
          { return RIGHT_PAREN;
          }
          // fall through
          case 205: break;
          case 11:
          { return INTEGER_LITERAL;
          }
          // fall through
          case 206: break;
          case 12:
          { closeHereStringIfAvailable(); return SEMI;
          }
          // fall through
          case 207: break;
          case 13:
          { return LESS_THAN;
          }
          // fall through
          case 208: break;
          case 14:
          { return EQ;
          }
          // fall through
          case 209: break;
          case 15:
          { return GREATER_THAN;
          }
          // fall through
          case 210: break;
          case 16:
          { return AT;
          }
          // fall through
          case 211: break;
          case 17:
          { if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState(); goToState(S_ARITH_SQUARE_MODE); return EXPR_ARITH_SQUARE;
          }
          // fall through
          case 212: break;
          case 18:
          { return BACKSLASH;
          }
          // fall through
          case 213: break;
          case 19:
          { if (yystate() == S_BACKQUOTE) backToPreviousState(); else goToState(S_BACKQUOTE); return BACKQUOTE;
          }
          // fall through
          case 214: break;
          case 20:
          { return LEFT_CURLY;
          }
          // fall through
          case 215: break;
          case 21:
          { return PIPE;
          }
          // fall through
          case 216: break;
          case 22:
          { if (yystate() == X_HEREDOC && !heredocState().isExpectingEvaluatingHeredoc()) return HEREDOC_LINE; return RIGHT_CURLY;
          }
          // fall through
          case 217: break;
          case 23:
          { return COND_OP_NOT;
          }
          // fall through
          case 218: break;
          case 24:
          { return COND_OP;
          }
          // fall through
          case 219: break;
          case 25:
          { if (isEmptyConditionalCommand()) {
            setEmptyConditionalCommand(false);
            backToPreviousState();
            return _EXPR_CONDITIONAL;
          } else {
            setEmptyConditionalCommand(false);
            return WORD;
          }
          }
          // fall through
          case 220: break;
          case 26:
          { return LEFT_PAREN;
          }
          // fall through
          case 221: break;
          case 27:
          { return ARITH_NEGATE;
          }
          // fall through
          case 222: break;
          case 28:
          { return ARITH_BASE_CHAR;
          }
          // fall through
          case 223: break;
          case 29:
          { return ARITH_MOD;
          }
          // fall through
          case 224: break;
          case 30:
          { return ARITH_BITWISE_AND;
          }
          // fall through
          case 225: break;
          case 31:
          { incOpenParenthesisCount(); return LEFT_PAREN;
          }
          // fall through
          case 226: break;
          case 32:
          { decOpenParenthesisCount(); return RIGHT_PAREN;
          }
          // fall through
          case 227: break;
          case 33:
          { return ARITH_MULT;
          }
          // fall through
          case 228: break;
          case 34:
          { return ARITH_PLUS;
          }
          // fall through
          case 229: break;
          case 35:
          { return COMMA;
          }
          // fall through
          case 230: break;
          case 36:
          { return ARITH_MINUS;
          }
          // fall through
          case 231: break;
          case 37:
          { return ARITH_DIV;
          }
          // fall through
          case 232: break;
          case 38:
          { return ARITH_NUMBER;
          }
          // fall through
          case 233: break;
          case 39:
          { return ARITH_COLON;
          }
          // fall through
          case 234: break;
          case 40:
          { return ARITH_LT;
          }
          // fall through
          case 235: break;
          case 41:
          { return ARITH_GT;
          }
          // fall through
          case 236: break;
          case 42:
          { return ARITH_QMARK;
          }
          // fall through
          case 237: break;
          case 43:
          { return LEFT_SQUARE;
          }
          // fall through
          case 238: break;
          case 44:
          { return RIGHT_SQUARE;
          }
          // fall through
          case 239: break;
          case 45:
          { return ARITH_BITWISE_XOR;
          }
          // fall through
          case 240: break;
          case 46:
          { return ARITH_BITWISE_NEGATE;
          }
          // fall through
          case 241: break;
          case 47:
          { return EXPR_ARITH_SQUARE;
          }
          // fall through
          case 242: break;
          case 48:
          { backToPreviousState(); return _EXPR_ARITH_SQUARE;
          }
          // fall through
          case 243: break;
          case 49:
          { backToPreviousState();
            if(yystate() == S_ARITH_ARRAY_MODE){backToPreviousState(); }
            return RIGHT_SQUARE;
          }
          // fall through
          case 244: break;
          case 50:
          { backToPreviousState(); return RIGHT_PAREN;
          }
          // fall through
          case 245: break;
          case 51:
          { backToPreviousState(); if (stringParsingState().isInSubshell()) stringParsingState().leaveSubshell(); return RIGHT_PAREN;
          }
          // fall through
          case 246: break;
          case 52:
          { backToPreviousState(); goToState(S_ARITH_ARRAY_MODE); return LEFT_SQUARE;
          }
          // fall through
          case 247: break;
          case 53:
          { goToState(S_ARITH_ARRAY_MODE); return LEFT_SQUARE;
          }
          // fall through
          case 248: break;
          case 54:
          { return STRING_DATA;
          }
          // fall through
          case 249: break;
          case 55:
          { if (!stringParsingState().isInSubstring() && stringParsingState().isSubstringAllowed()) {
            stringParsingState().enterString();
            goToState(X_STRINGMODE);
            return STRING_BEGIN;
          }

            stringParsingState().leaveString();
            backToPreviousState();
            return STRING_END;
          }
          // fall through
          case 250: break;
          case 56:
          { if (yystate() == S_BACKQUOTE) {
            backToPreviousState();
          }
          else {
            goToState(S_BACKQUOTE);
          }
            return BACKQUOTE;
          }
          // fall through
          case 251: break;
          case 57:
          { return PARAM_EXPANSION_OP_EXCL;
          }
          // fall through
          case 252: break;
          case 58:
          { setParamExpansionHash(isParamExpansionWord()); return PARAM_EXPANSION_OP_HASH;
          }
          // fall through
          case 253: break;
          case 59:
          { setParamExpansionOther(true); return PARAM_EXPANSION_OP_PERCENT;
          }
          // fall through
          case 254: break;
          case 60:
          { return PARAM_EXPANSION_OP_STAR;
          }
          // fall through
          case 255: break;
          case 61:
          { return PARAM_EXPANSION_OP_PLUS;
          }
          // fall through
          case 256: break;
          case 62:
          { setParamExpansionOther(true); return PARAM_EXPANSION_OP_LOWERCASE_FIRST;
          }
          // fall through
          case 257: break;
          case 63:
          { return PARAM_EXPANSION_OP_MINUS;
          }
          // fall through
          case 258: break;
          case 64:
          { setParamExpansionOther(true); return PARAM_EXPANSION_OP_DOT;
          }
          // fall through
          case 259: break;
          case 65:
          { goToState(S_PARAM_EXPANSION_PATTERN); return PARAM_EXPANSION_OP_SLASH;
          }
          // fall through
          case 260: break;
          case 66:
          { setParamExpansionWord(true); return WORD;
          }
          // fall through
          case 261: break;
          case 67:
          { return PARAM_EXPANSION_OP_COLON;
          }
          // fall through
          case 262: break;
          case 68:
          { return PARAM_EXPANSION_OP_EQ;
          }
          // fall through
          case 263: break;
          case 69:
          { setParamExpansionOther(true); return PARAM_EXPANSION_OP_QMARK;
          }
          // fall through
          case 264: break;
          case 70:
          { return PARAM_EXPANSION_OP_AT;
          }
          // fall through
          case 265: break;
          case 71:
          { if (!isParamExpansionOther() && (!isParamExpansionWord() || !isParamExpansionHash())) {
            // If we expect an array reference parse the next tokens as arithmetic expression
            goToState(S_ARITH_ARRAY_MODE);
          }

            return LEFT_SQUARE;
          }
          // fall through
          case 266: break;
          case 72:
          { setParamExpansionOther(true); return PARAM_EXPANSION_OP_UPPERCASE_FIRST;
          }
          // fall through
          case 267: break;
          case 73:
          { setParamExpansionWord(false); setParamExpansionHash(false); setParamExpansionOther(false);
            return LEFT_CURLY;
          }
          // fall through
          case 268: break;
          case 74:
          { setParamExpansionWord(false); setParamExpansionHash(false); setParamExpansionOther(false);
            backToPreviousState();
            closeHereStringIfAvailable();
            return RIGHT_CURLY;
          }
          // fall through
          case 269: break;
          case 75:
          { backToPreviousState(); return PARAM_EXPANSION_PATTERN;
          }
          // fall through
          case 270: break;
          case 76:
          { yypushback(1); backToPreviousState();
          }
          // fall through
          case 271: break;
          case 77:
          { backToPreviousState(); goToState(S_PARAM_EXPANSION_REPLACEMENT); return PARAM_EXPANSION_OP_SLASH;
          }
          // fall through
          case 272: break;
          case 78:
          { backToPreviousState(); return WORD;
          }
          // fall through
          case 273: break;
          case 79:
          { if (yystate() == X_HERE_STRING && !isInHereStringContent()) enterHereStringContent(); goToState(S_SINGLE_QUOTE_IN_BACKTICK); return STRING2;
          }
          // fall through
          case 274: break;
          case 80:
          { heredocState().pushMarker(zzCurrentPos, yytext(), yystate() == X_HEREDOC_MARKER_IGNORE_TABS);
            backToPreviousState();
            goToState(S_HEREDOC_EXPECTED);

            return HEREDOC_MARKER_START;
          }
          // fall through
          case 275: break;
          case 81:
          { heredocState().removeMarker(zzCurrentPos); backToPreviousState(); return LINE_FEED;
          }
          // fall through
          case 276: break;
          case 82:
          { //support end marker followed by a backtick if nested in a backtick command
            CharSequence markerText = yytext();
            boolean dropLastChar = false;
            if (isInState(S_BACKQUOTE) && yylength() >= 2 && yycharat(yylength()-1) == '`') {
              markerText = markerText.subSequence(0, yylength()-1);
              dropLastChar = true;
            }

            if (heredocState().isNextMarker(markerText)) {
              boolean ignoreTabs = heredocState().isIgnoringTabs();

              heredocState().popMarker(markerText);
              popStates(X_HEREDOC);
              if (heredocState().isEmpty() && yystate() == S_HEREDOC_EXPECTED) {
                backToPreviousState();
              }

              if (dropLastChar) {
                yypushback(1);
              }

              return ignoreTabs ? HEREDOC_MARKER_IGNORING_TABS_END : HEREDOC_MARKER_END;
            }

            return HEREDOC_LINE;
          }
          // fall through
          case 277: break;
          case 83:
          { if (!heredocState().isEmpty()) {
            return HEREDOC_LINE;
          }
            return LINE_FEED;
          }
          // fall through
          case 278: break;
          case 84:
          { if (heredocState().isNextMarker(yytext())) {
            boolean ignoreTabs = heredocState().isIgnoringTabs();

            heredocState().popMarker(yytext());
            popStates(X_HEREDOC);
            if (heredocState().isEmpty() && yystate() == S_HEREDOC_EXPECTED) {
              backToPreviousState();
            }

            return ignoreTabs ? HEREDOC_MARKER_IGNORING_TABS_END : HEREDOC_MARKER_END;
          }

            return HEREDOC_LINE;
          }
          // fall through
          case 279: break;
          case 85:
          { return HEREDOC_LINE;
          }
          // fall through
          case 280: break;
          case 86:
          { if (isInHereStringContent()) { leaveHereStringContent(); backToPreviousState(); } return WHITESPACE;
          }
          // fall through
          case 281: break;
          case 87:
          { if (!isInHereStringContent()) enterHereStringContent(); return WORD;
          }
          // fall through
          case 282: break;
          case 88:
          { return STRING2;
          }
          // fall through
          case 283: break;
          case 89:
          { backToPreviousState(); return STRING2;
          }
          // fall through
          case 284: break;
          case 90:
          { backToPreviousState(); backToPreviousState(); return BACKQUOTE;
          }
          // fall through
          case 285: break;
          case 91:
          { return SHEBANG;
          }
          // fall through
          case 286: break;
          case 92:
          { return VARIABLE;
          }
          // fall through
          case 287: break;
          case 93:
          { yypushback(1); goToState(S_ARITH_SQUARE_MODE); return DOLLAR;
          }
          // fall through
          case 288: break;
          case 94:
          { if (yystate() == X_HEREDOC && !heredocState().isExpectingEvaluatingHeredoc()) return HEREDOC_LINE; goToState(S_PARAM_EXPANSION); yypushback(1); return DOLLAR;
          }
          // fall through
          case 289: break;
          case 95:
          { closeHereStringIfAvailable(); return AND_AND;
          }
          // fall through
          case 290: break;
          case 96:
          { return FILEDESCRIPTOR;
          }
          // fall through
          case 291: break;
          case 97:
          { if (isBash4()) {
            return REDIRECT_AMP_GREATER;
          } else {
            yypushback(1);
            return AMP;
          }
          }
          // fall through
          case 292: break;
          case 98:
          { if (yystate() == X_HERE_STRING && !isInHereStringContent()) enterHereStringContent(); return STRING2;
          }
          // fall through
          case 293: break;
          case 99:
          { if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState(); goToState(S_ARITH); return EXPR_ARITH;
          }
          // fall through
          case 294: break;
          case 100:
          { return ADD_EQ;
          }
          // fall through
          case 295: break;
          case 101:
          { goToState(X_HEREDOC_MARKER);
            return HEREDOC_MARKER_TAG;
          }
          // fall through
          case 296: break;
          case 102:
          { return REDIRECT_LESS_GREATER;
          }
          // fall through
          case 297: break;
          case 103:
          { return SHIFT_RIGHT;
          }
          // fall through
          case 298: break;
          case 104:
          { return REDIRECT_GREATER_BAR;
          }
          // fall through
          case 299: break;
          case 105:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzMarkedPos, -1);
          { return ASSIGNMENT_WORD;
          }
          // fall through
          case 300: break;
          case 106:
          { goToState(S_TEST); setEmptyConditionalCommand(false); return EXPR_CONDITIONAL;
          }
          // fall through
          case 301: break;
          case 107:
          { return LINE_CONTINUATION;
          }
          // fall through
          case 302: break;
          case 108:
          { return DO_KEYWORD;
          }
          // fall through
          case 303: break;
          case 109:
          { return FI_KEYWORD;
          }
          // fall through
          case 304: break;
          case 110:
          { return IF_KEYWORD;
          }
          // fall through
          case 305: break;
          case 111:
          { if (isBash4()) {
            return PIPE_AMP;
          } else {
            yypushback(1);
            return PIPE;
          }
          }
          // fall through
          case 306: break;
          case 112:
          { closeHereStringIfAvailable(); return OR_OR;
          }
          // fall through
          case 307: break;
          case 113:
          { backToPreviousState(); setEmptyConditionalCommand(false); return _EXPR_CONDITIONAL;
          }
          // fall through
          case 308: break;
          case 114:
          { return COND_OP_EQ_EQ;
          }
          // fall through
          case 309: break;
          case 115:
          { return COND_OP_REGEX;
          }
          // fall through
          case 310: break;
          case 116:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, 1);
          { goToState(S_DOLLAR_PREFIXED); return DOLLAR;
          }
          // fall through
          case 311: break;
          case 117:
          { return AND_AND;
          }
          // fall through
          case 312: break;
          case 118:
          { return OR_OR;
          }
          // fall through
          case 313: break;
          case 119:
          { return ARITH_NE;
          }
          // fall through
          case 314: break;
          case 120:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, 1);
          { if (yystate() == X_HEREDOC && !heredocState().isExpectingEvaluatingHeredoc()) return HEREDOC_LINE; goToState(S_DOLLAR_PREFIXED); return DOLLAR;
          }
          // fall through
          case 315: break;
          case 121:
          { return ARITH_ASS_MOD;
          }
          // fall through
          case 316: break;
          case 122:
          { return ARITH_ASS_BIT_AND;
          }
          // fall through
          case 317: break;
          case 123:
          { if (openParenthesisCount() > 0) {
            decOpenParenthesisCount();
            yypushback(1);

            return RIGHT_PAREN;
          } else {
            backToPreviousState();

            return _EXPR_ARITH;
          }
          }
          // fall through
          case 318: break;
          case 124:
          { return ARITH_EXPONENT;
          }
          // fall through
          case 319: break;
          case 125:
          { return ARITH_ASS_MUL;
          }
          // fall through
          case 320: break;
          case 126:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, 1);
          { return PARAM_EXPANSION_OP_STAR;
          }
          // fall through
          case 321: break;
          case 127:
          { return ARITH_PLUS_PLUS;
          }
          // fall through
          case 322: break;
          case 128:
          { return ARITH_ASS_PLUS;
          }
          // fall through
          case 323: break;
          case 129:
          { return ARITH_MINUS_MINUS;
          }
          // fall through
          case 324: break;
          case 130:
          { return ARITH_ASS_MINUS;
          }
          // fall through
          case 325: break;
          case 131:
          { return ARITH_ASS_DIV;
          }
          // fall through
          case 326: break;
          case 132:
          { return ARITH_OCTAL_NUMBER;
          }
          // fall through
          case 327: break;
          case 133:
          { return ARITH_SHIFT_LEFT;
          }
          // fall through
          case 328: break;
          case 134:
          { return ARITH_LE;
          }
          // fall through
          case 329: break;
          case 135:
          { return ARITH_EQ;
          }
          // fall through
          case 330: break;
          case 136:
          { return ARITH_GE;
          }
          // fall through
          case 331: break;
          case 137:
          { return ARITH_SHIFT_RIGHT;
          }
          // fall through
          case 332: break;
          case 138:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzMarkedPos, -1);
          { goToState(S_ARRAY); return ASSIGNMENT_WORD;
          }
          // fall through
          case 333: break;
          case 139:
          { return ARITH_ASS_BIT_XOR;
          }
          // fall through
          case 334: break;
          case 140:
          { return ARITH_ASS_BIT_OR;
          }
          // fall through
          case 335: break;
          case 141:
          { goToState(S_CASE_PATTERN);
            if (isBash4()) {
              return CASE_END;
            }
            else {
              yypushback(1);
              return SEMI;
            }
          }
          // fall through
          case 336: break;
          case 142:
          { goToState(S_CASE_PATTERN); return CASE_END;
          }
          // fall through
          case 337: break;
          case 143:
          { if (!isInCaseBody()) { setInCaseBody(true); goToState(S_CASE_PATTERN); }; return WORD;
          }
          // fall through
          case 338: break;
          case 144:
          { setParamExpansionHash(isParamExpansionWord()); return PARAM_EXPANSION_OP_HASH_HASH;
          }
          // fall through
          case 339: break;
          case 145:
          { setParamExpansionOther(true); return PARAM_EXPANSION_OP_LOWERCASE_ALL;
          }
          // fall through
          case 340: break;
          case 146:
          { goToState(S_PARAM_EXPANSION_PATTERN); return PARAM_EXPANSION_OP_SLASH_SLASH;
          }
          // fall through
          case 341: break;
          case 147:
          { return PARAM_EXPANSION_OP_COLON_PLUS;
          }
          // fall through
          case 342: break;
          case 148:
          { return PARAM_EXPANSION_OP_COLON_MINUS;
          }
          // fall through
          case 343: break;
          case 149:
          { return PARAM_EXPANSION_OP_COLON_EQ;
          }
          // fall through
          case 344: break;
          case 150:
          { return PARAM_EXPANSION_OP_COLON_QMARK;
          }
          // fall through
          case 345: break;
          case 151:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, 1);
          { return LEFT_SQUARE;
          }
          // fall through
          case 346: break;
          case 152:
          { setParamExpansionOther(true); return PARAM_EXPANSION_OP_UPPERCASE_ALL;
          }
          // fall through
          case 347: break;
          case 153:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzMarkedPos, -1);
          { backToPreviousState(); goToState(S_PARAM_EXPANSION_DELIMITER); return PARAM_EXPANSION_PATTERN;
          }
          // fall through
          case 348: break;
          case 154:
          { if (heredocState().isNextMarker(yytext())) {
            boolean ignoreTabs = heredocState().isIgnoringTabs();

            heredocState().popMarker(yytext());
            popStates(X_HEREDOC);
            if (heredocState().isEmpty() && yystate() == S_HEREDOC_EXPECTED) {
              backToPreviousState();
            }

            return ignoreTabs ? HEREDOC_MARKER_IGNORING_TABS_END : HEREDOC_MARKER_END;
          }

            return yystate() == X_HEREDOC && heredocState().isExpectingEvaluatingHeredoc() && !"$".equals(yytext().toString())
                    ? HEREDOC_CONTENT
                    : HEREDOC_LINE;
          }
          // fall through
          case 349: break;
          case 155:
          { if (!isInHereStringContent()) enterHereStringContent(); return VARIABLE;
          }
          // fall through
          case 350: break;
          case 156:
          { if (isBash4()) {
            return REDIRECT_AMP_GREATER_GREATER;
          } else {
            yypushback(2);
            return AMP;
          }
          }
          // fall through
          case 351: break;
          case 157:
          { if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState(); yypushback(2); goToState(S_SUBSHELL); return LEFT_PAREN;
          }
          // fall through
          case 352: break;
          case 158:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, 2);
          { return REDIRECT_LESS_AMP;
          }
          // fall through
          case 353: break;
          case 159:
          { goToState(X_HEREDOC_MARKER_IGNORE_TABS);
            return HEREDOC_MARKER_TAG;
          }
          // fall through
          case 354: break;
          case 160:
          { goToState(X_HERE_STRING); return REDIRECT_HERE_STRING;
          }
          // fall through
          case 355: break;
          case 161:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, 2);
          { return REDIRECT_GREATER_AMP;
          }
          // fall through
          case 356: break;
          case 162:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzMarkedPos, -2);
          { return ASSIGNMENT_WORD;
          }
          // fall through
          case 357: break;
          case 163:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzMarkedPos, -2);
          { goToState(S_ASSIGNMENT_LIST); return ASSIGNMENT_WORD;
          }
          // fall through
          case 358: break;
          case 164:
          { yypushback(1); goToState(S_TEST); setEmptyConditionalCommand(true); return EXPR_CONDITIONAL;
          }
          // fall through
          case 359: break;
          case 165:
          { goToState(S_TEST_COMMAND); return BRACKET_KEYWORD;
          }
          // fall through
          case 360: break;
          case 166:
          { return FOR_KEYWORD;
          }
          // fall through
          case 361: break;
          case 167:
          { return LET_KEYWORD;
          }
          // fall through
          case 362: break;
          case 168:
          { backToPreviousState(); return _BRACKET_KEYWORD;
          }
          // fall through
          case 363: break;
          case 169:
            // general lookahead, find correct zzMarkedPos
          { int zzFState = 25;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) {
              zzFin = new boolean[zzBufferL.length()+1];
            }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = Character.codePointAt(zzBufferL, zzFPos);
              zzFPos += Character.charCount(zzInput);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
            }
            if (zzFState != -1) {
              zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
            }
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 26;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = Character.codePointBefore(zzBufferL, zzFPos);
              zzFPos -= Character.charCount(zzInput);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
            };
            zzMarkedPos = zzFPos;
          }
          { goToState(S_PARAM_EXPANSION); yypushback(1); return DOLLAR;
          }
          // fall through
          case 364: break;
          case 170:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, 2);
          { yypushback(1); return ARITH_MINUS;
          }
          // fall through
          case 365: break;
          case 171:
          { return ARITH_HEX_NUMBER;
          }
          // fall through
          case 366: break;
          case 172:
          { return ARITH_ASS_SHIFT_LEFT;
          }
          // fall through
          case 367: break;
          case 173:
          { return ARITH_ASS_SHIFT_RIGHT;
          }
          // fall through
          case 368: break;
          case 174:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, 1);
          { backToPreviousState(); goToState(S_ASSIGNMENT_LIST); return RIGHT_SQUARE;
          }
          // fall through
          case 369: break;
          case 175:
          { goToState(S_CASE_PATTERN);
            if (!isBash4()) {
              yypushback(1);
            }
            return CASE_END;
          }
          // fall through
          case 370: break;
          case 176:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, 3);
          { return REDIRECT_GREATER_GREATER_AMP;
          }
          // fall through
          case 371: break;
          case 177:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzMarkedPos, -3);
          { goToState(S_ASSIGNMENT_LIST); return ASSIGNMENT_WORD;
          }
          // fall through
          case 372: break;
          case 178:
            // general lookahead, find correct zzMarkedPos
          { int zzFState = 23;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) {
              zzFin = new boolean[zzBufferL.length()+1];
            }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = Character.codePointAt(zzBufferL, zzFPos);
              zzFPos += Character.charCount(zzInput);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
            }
            if (zzFState != -1) {
              zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
            }
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 24;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = Character.codePointBefore(zzBufferL, zzFPos);
              zzFPos -= Character.charCount(zzInput);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
            };
            zzMarkedPos = zzFPos;
          }
          { goToState(S_ARRAY); return ASSIGNMENT_WORD;
          }
          // fall through
          case 373: break;
          case 179:
          { setInCaseBody(false); goToState(S_CASE); return CASE_KEYWORD;
          }
          // fall through
          case 374: break;
          case 180:
          { return DONE_KEYWORD;
          }
          // fall through
          case 375: break;
          case 181:
          { return ELIF_KEYWORD;
          }
          // fall through
          case 376: break;
          case 182:
          { return ELSE_KEYWORD;
          }
          // fall through
          case 377: break;
          case 183:
          { return THEN_KEYWORD;
          }
          // fall through
          case 378: break;
          case 184:
          { return TIME_KEYWORD;
          }
          // fall through
          case 379: break;
          case 185:
          { return TRAP_KEYWORD;
          }
          // fall through
          case 380: break;
          case 186:
          { backToPreviousState(); return ESAC_KEYWORD;
          }
          // fall through
          case 381: break;
          case 187:
          { backToPreviousState(); yypushback(yylength());
          }
          // fall through
          case 382: break;
          case 188:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, 4);
          { return REDIRECT_GREATER_GREATER_AMP_EXCL;
          }
          // fall through
          case 383: break;
          case 189:
          { return ENDIF_KEYWORD;
          }
          // fall through
          case 384: break;
          case 190:
          { return UNTIL_KEYWORD;
          }
          // fall through
          case 385: break;
          case 191:
          { return WHILE_KEYWORD;
          }
          // fall through
          case 386: break;
          case 192:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, 1);
          { goToState(S_ARITH_ARRAY_MODE); return PARAM_EXPANSION_OP_HASH;
          }
          // fall through
          case 387: break;
          case 193:
          { return SELECT_KEYWORD;
          }
          // fall through
          case 388: break;
          case 194:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, 1);
          { setParamExpansionWord(false); setParamExpansionHash(false); setParamExpansionOther(false);
            return LEFT_CURLY;
          }
          // fall through
          case 389: break;
          case 195:
          { return FUNCTION_KEYWORD;
          }
          // fall through
          case 390: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
